{
  "info": {
    "title": "DealMaker API",
    "description": "# Introduction\n\nWelcome to DealMaker’s Web API v1! This API is RESTful, easy to integrate with, and offers support in 2 different languages. This is the technical documentation for our API. There are tutorials and examples of integrations with our API available on our [knowledge centre](https://help.dealmaker.tech/training-centre) as well.\n\n# Libraries\n\n- Javascript\n- Ruby\n\n# Authentication\n\nTo authenticate, add an Authorization header to your API request that contains an access token. Before you [generate an access token](#how-to-generate-an-access-token) your must first [create an application](#create-an-application) on your portal and retrieve the your client ID and secret\n\n## Create an Application\n\nDealMaker’s Web API v1 supports the use of OAuth applications. Applications can be generated in your [account](https://app.dealmaker.tech/developer/applications).\n\nTo create an API Application, click on your user name in the top right corner to open a dropdown menu, and select \"Integrations\". Under the API settings tab, click the `Create New Application` button\n\n![Screenshot](https://s3.ca-central-1.amazonaws.com/docs.dealmaker.tech/images/api-application-1.png)\n\nName your application and assign the level of permissions for this application\n\n![Screenshot](https://s3.ca-central-1.amazonaws.com/docs.dealmaker.tech/images/api-application-2.png)\n\nOnce your application is created, save in a secure space your client ID and secret.\n\n**WARNING**: The secret key will not be visible after you click the close button\n\n![Screenshot](https://s3.ca-central-1.amazonaws.com/docs.dealmaker.tech/images/api-application-3.png)\n\nFrom the developer tab, you will be able to view and manage all the available applications\n\n![Screenshot](https://s3.ca-central-1.amazonaws.com/docs.dealmaker.tech/images/api-application-4.png)\n\nEach Application consists of a client id, secret and set of scopes. The scopes define what resources you want to have access to. The client ID and secret are used to generate an access token. You will need to create an application to use API endpoints.\n\n## How to generate an access token\n\nAfter creating an application, you must make a call to obtain a bearer token using the Generate an OAuth token operation. This operation requires the following parameters:\n\n`token endpoint` - https://app.dealmaker.tech/oauth/token\n\n`grant_type` - must be set to `client_credentials`\n\n`client_id` - the Client ID displayed when you created the OAuth application in the previous step\n\n`client_secret` - the Client Secret displayed when you created the OAuth application in the previous step\n\n`scope` - the scope is established when you created the OAuth application in the previous step\n\nNote: The Generate an OAuth token response specifies how long the bearer token is valid for. You should reuse the bearer token until it is expired. When the token is expired, call Generate an OAuth token again to generate a new one.\n\nTo use the access token, you must set a plain text header named `Authorization` with the contents of the header being “Bearer XXX” where XXX is your generated access token.\n\n### Example\n\n#### Postman\n\nHere's an example on how to generate the access token with Postman, where `{{CLIENT_ID}}` and `{{CLIENT_SECRET}}` are the values generated after following the steps on [Create an Application](#create-an-application)\n\n![Get access token postman example](https://s3.ca-central-1.amazonaws.com/docs.dealmaker.tech/images/token-postman.png)\n\n# Status Codes\n\n## Content-Type Header\n\nAll responses are returned in JSON format. We specify this by sending the Content-Type header.\n\n## Status Codes\n\nBelow is a table containing descriptions of the various status codes we currently support against various resources.\n\nSometimes your API call will generate an error. Here you will find additional information about what to expect if you don’t format your request properly, or we fail to properly process your request.\n\n| Status Code | Description |\n| ----------- | ----------- |\n| `200`       | Success     |\n| `403`       | Forbidden   |\n| `404`       | Not found   |\n\n# Pagination\n\nPagination is used to divide large responses is smaller portions (pages). By default, all endpoints return a maximum of 25 records per page. You can change the number of records on a per request basis by passing a `per_page` parameter in the request header parameters. The largest supported `per_page` parameter is 100.\n\nWhen the response exceeds the `per_page` parameter, you can paginate through the records by increasing the `offset` parameter. Example: `offset=25` will return 25 records starting from 26th record. You may also paginate using the `page` parameter to indicate the page number you would like to show on the response.\n\nPlease review the table below for the input parameters\n\n## Inputs\n\n| Parameter  | Description                                                                     |\n| ---------- | ------------------------------------------------------------------------------- |\n| `per_page` | Amount of records included on each page (Default is 25)                         |\n| `page`     | Page number                                                                     |\n| `offset`   | Amount of records offset on the API request where 0 represents the first record |\n\n## Response Headers\n\n| Response Header | Description                                  |\n| --------------- | -------------------------------------------- |\n| `X-Total`       | Total number of records of response          |\n| `X-Total-Pages` | Total number of pages of response            |\n| `X-Per-Page`    | Total number of records per page of response |\n| `X-Page`        | Number of current page                       |\n| `X-Next-Page`   | Number of next page                          |\n| `X-Prev-Page`   | Number of previous page                      |\n| `X-Offset`      | Total number of records offset               |\n\n# Search and Filtering (The q parameter)\n\nThe q optional parameter accepts a string as input and allows you to filter the request based on that string. Please note that search strings must be encoded according to ASCII. For example, \"john+investor&#64;dealmaker.tech\" should be passed as “john%2Binvestor%40dealmaker.tech”. There are two main ways to filter with it.\n\n## Keyword filtering\n\nSome keywords allow you to filter investors based on a specific “scope” of the investors, for example using the string “Invited” will filter all investors with the status invited, and the keyword “Has attachments” will filter investors with attachments.\n\nHere’s a list of possible keywords and the “scope” each one of the keywords filters by:\n\n| Keywords                                       | Scope                                                                       | Decoded Example                                                      | Encoded Example                                                                          |\n| ---------------------------------------------- | --------------------------------------------------------------------------- | -------------------------------------------------------------------- | ---------------------------------------------------------------------------------------- |\n| Signed on \\(date range\\)                       | Investors who signed in the provided date range                             | Signed on (date range) [2020-07-01:2020-07-31]                       | `Signed%20on%20%28date%20range%29%20%5B2020-07-01%3A2020-07-31%5D`                       |\n| Enabled for countersignature on \\(date range\\) | Investors who were enabled for counter signature in the provided date range | Enabled for countersignature on (date range) [2022-05-24:2022-05-25] | `Enabled%20for%20countersignature%20on%20(date%20range)%20%5B2022-05-24%3A2022-05-25%5D` |\n| Accepted on \\(date range\\)                     | Investors accepted in the provided date rage                                | Accepted on (date range) [2022-05-24:2022-05-25]                     | `Accepted%20on%20(date%20range)%20%5B2022-05-24%3A2022-05-25%5D`                         |\n| Offline                                        | Investors added to the deal offline                                         | Offline                                                              | `Offline`                                                                                |\n| Online                                         | Investors added to the deal online                                          | Online                                                               | `Online`                                                                                 |\n| Signed                                         | Investors who signed their agreement                                        | Signed                                                               | `Signed`                                                                                 |\n| Waiting for countersignature                   | Investors who have signed and are waiting for counter signature             | Waiting for countersignature                                         | `Waiting%20for%20countersignature`                                                       |\n| Invited                                        | Investors on the Invited Status                                             | Invited                                                              | `Invited`                                                                                |\n| Accepted                                       | Investors in the Accepted Status                                            | Accepted                                                             | `Accepted`                                                                               |\n| Questionnaire in progress                      | All Investors who have not finished completing the questionnaire            | Questionnaire in progress                                            | `Questionnaire%20in%20progress`                                                          |\n| Has attachments                                | All Investors with attachments                                              | Has attachments                                                      | `Has%20attachments`                                                                      |\n| Has notes                                      | All Investors with notes                                                    | Has notes                                                            | `Has%20notes`                                                                            |\n| Waiting for co-signature                       | Investors who have signed and are waiting for co-signature                  | Waiting for co-signature                                             | `Waiting%20for%20co-signature`                                                           |\n| Background Check Approved                      | Investors with approved background check                                    | Background Check Approved                                            | `Background%20Check%20Approved`                                                          |\n| Document Review Pending                        | Investors with pending review                                               | Document Review Pending                                              | `Document%20Review%20Pending`                                                            |\n| Document Upload Pending                        | Investors with pending documents to upload                                  | Document Upload Pending                                              | `Document%20Upload%20Pending`                                                            |\n| Required adjudicator review                    | Investors who are required to be review by the adjudicator                  | Required adjudicator review                                          | `Required%20adjudicator%20review`                                                        |\n\n---\n\n**NOTE**\n\nFiltering keywords are case sensitive and need to be encoded\n\n---\n\n## Search String\n\nAny value for the parameter which does not match one of the keywords listed above, will use fields like `first name`, `last name`, `email`, `tags` to search for the investor.\n\nFor example, if you search “Robert”, because this does not match one of the keywords listed above, it will then return any investors who have the string “Robert” in their name, email, or tags fields.\n\n# Versioning\n\nThe latest version is v1.\n\nThe version can be updated on the `Accept` header, just set the version as stated on the following example:\n\n```\n\nAccept:application/vnd.dealmaker-v1+json\n\n```\n\n| Version | Accept Header                       |\n| ------- | ----------------------------------- |\n| `v1`    | application/vnd.dealmaker-`v1`+json |\n\n# SDK’s\n\nFor instruction on installing SDKs, please view the following links\n\n- [Javascript](https://github.com/DealMakerTech/api/tree/main/v1/clients/javascript)\n- [Ruby](https://github.com/DealMakerTech/api/tree/main/v1/clients/ruby)\n\n# Webhooks\n\nOur webhooks functionality allows clients to automatically receive updates on a deal's investor data.\n\nSome of the data that the webhooks include:\n\n- Investor Name\n- Date created\n- Email\n- Phone\n- Allocation\n- Attachments\n- Accredited investor status\n- Accredited investor category\n- State (Draft, Invited, Signed, Accepted, Waiting, Inactive)\n\nVia webhooks clients can subscribe to the following events as they happen on Dealmaker:\n\n- Investor is created\n- Investor details are updated (any of the investor details above change or are updated)\n- Investor has signed their agreement\n- Invertor fully funded their investment\n- Investor has been accepted\n- Investor is deleted\n\nA URL supplied by the client will receive all the events with the information as part of the payload. Clients are able to add and update the URL within DealMaker.\n\n## Configuration\n\nFor a comprehensive guide on how to configure Webhooks please visit our support article: [Configuring Webhooks on DealMaker – DealMaker Support](https://help.dealmaker.tech/configuring-webhooks-on-dealmaker).\n\nAs a developer user on DealMaker, you are able to configure webhooks by following the steps below:\n\n1. Sign into Dealmaker\n2. Go to **“Your profile”** in the top right corner\n3. Access an **“Integrations”** configuration via the left menu\n4. The developer configures webhooks by including:\n   - The HTTPS URL where the request will be sent\n   - Optionally, a security token that we would use to build a SHA1 hash that would be included in the request headers. The name of the header is `X-DealMaker-Signature`. If the secret is not specified, the hash won’t be included in the headers.\n   - The Deal(s) to include in the webhook subscription\n   - An email address that will be used to notify about errors.\n5. The developers can disable webhooks temporarily if needed\n\n## Specification\n\n### Events\n\nThe initial set of events will be related to the investor. The events are:\n\n1. `investor.created`\n\n   - Triggers every time a new investor is added to a deal\n\n2. `investor.updated`\n\n   - Triggers on updates to any of the following fields:\n     - Status\n     - Name\n     - Email - (this is a user field so we trigger event for all investors with webhook subscription)\n     - Allocated Amount\n     - Investment Amount\n     - Accredited investor fields\n     - Adding or removing attachments\n     - Tags\n   - When the investor status is signed, the payload also includes a link to the signed document; the link expires after 30 minutes\n  \n3. `investor.signed`\n\n   - Triggers when the investor signs their subscription agreement (terms and conditions)\n     - When this happens the investor.state becomes `signed`\n   - This event includes the same fields as the `investor.updated` event\n\n4. `investor.funded`\n\n   - Triggers when the investor becomes fully funded\n     - This happens when the investor.funded_state becomes `funded`\n   - This event includes the same fields as the `investor.updated` event\n\n5. `investor.accepted`\n\n   - Triggers when the investor is countersigned\n     - When this happens the investor.state becomes `accepted`\n   - This event includes the same fields as the `investor.updated` event\n\n6.  `investor.deleted`\n\n   - Triggers when the investor is removed from the deal\n   - The investor key of the payload only includes investor ID\n   - The deal is not included in the payload. Due to our implementation it’s impossible to retrieve the deal the investor was part of\n\n### Requests\n\n- The request is a `POST`\n- The payload’s `content-type` is `application/json`\n- Only `2XX` responses are considered successful. In the event of a different response, we consider it failed and queue the event for retry\n- We retry the request five times, after the initial attempt. Doubling the waiting time between intervals with each try. The first retry happens after 30 seconds, then 60 seconds, 2 mins, 4 minutes, and 8 minutes. This timing scheme gives the receiver about 1 hour if all the requests fail\n- If an event fails all the attempts to be delivered, we send an email to the address that the user configured\n\n### Payload\n\n#### Common Properties\n\nThere will be some properties that are common to all the events on the system.\n\n| Key               | Type   | Description                                                                              |\n| ----------------- | ------ | --------------------------------------------------------------------------------------   |\n| event             | String | The event that triggered the call                                                        |\n| event_id          | String | A unique identifier for the event                                                        |\n| deal<sup>\\*</sup> | Object | The deal in which the event occurred. please see below for an example on the deal object<sup>\\*\\*</sup> |\n\n<sup>\\*</sup>This field is not included when deleting a resource\n\n<sup>\\*\\*</sup> Sample Deal Object in the webhook payload\n\n```json\n\"deal\": {\n        \"id\": 0,\n        \"title\": \"string\",\n        \"created_at\": \"2022-12-06T18:14:44.000Z\",\n        \"updated_at\": \"2022-12-08T12:46:48.000Z\",\n        \"state\": \"string\",\n        \"currency\": \"string\",\n        \"security_type\": \"string\",\n        \"price_per_security\": 0.00,\n        \"deal_type\": \"string\",\n        \"minimum_investment\": 0,\n        \"maximum_investment\": 0,\n        \"issuer\": {\n            \"id\": 0,\n            \"name\": \"string\"\n        },\n        \"enterprise\": {\n            \"id\": 0,\n            \"name\": \"string\"\n        }\n    }\n```\n\n#### Common Properties (investor scope)\n\nBy design, we have incorporated on the webhooks payload the same investor-related fields included in the Investor model, for reference on the included fields, their types and values please click [here](https://docs.dealmaker.tech/#tag/investor_model). This will allow you to get all the necessary information you need about a particular investor without having to call the Get Investor by ID endpoint.                                                           |\n#### Investor State\n\nHere is a brief description of each investor state:\n\n- **Draft:** the investor is added to the platform but hasn't been invited yet and cannot access the portal\n- **Invited:** the investor was added to the platform but hasn’t completed the questionnaire\n- **Signed:** the investor signed the document (needs approval from Lawyer or Reviewer before countersignature)\n- **Waiting:** the investor was approved for countersignature by any of the Lawyers or Reviewers in the deal\n- **Accepted:** the investor's agreement was countersigned by the Signatory\n- **Inactive** the investor is no longer eligible to participate in the offering. This may be because their warrant expired, they requested a refund, or they opted out of the offering\n\n#### Update Delay\n\nGiven the high number of updates our platform performs on any investor, we’ve added a cool down period on update events that allows us to “group” updates and trigger only one every minute. In consequence, update events will be delivered 1 minute after the initial request was made and will include the latest version of the investor data at delivery time.\n",
    "version": "1.75.0"
  },
  "swagger": "2.0",
  "produces": [
    "application/xml",
    "application/json",
    "application/octet-stream",
    "text/plain"
  ],
  "securityDefinitions": {
    "oauth": {
      "description": "OAuth security",
      "type": "oauth2",
      "tokenUrl": "https://app.dealmaker.tech/oauth/token",
      "flow": "clientCredentials",
      "scopes": {
        "deals.read": "Read deal information",
        "deals.write": "Write information to deals",
        "companies.read": "Read company information",
        "companies.write": "Write information to companies",
        "deals.investors.read": "Read information to investors",
        "deals.investors.write": "Write information to investors",
        "webhooks.read": "Read information to webhooks",
        "webhooks.write": "Write information to webhooks"
      }
    }
  },
  "host": "api.dealmaker.tech",
  "x-servers": [
    {
      "url": "https://api.dealmaker.tech",
      "description": "Production"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Endpoints",
      "tags": [
        "deal",
        "investor",
        "investor_profile",
        "company",
        "country"
      ]
    },
    {
      "name": "Models",
      "tags": [
        "deal_model",
        "investor_model",
        "investor_profile_model",
        "company_model",
        "address_model",
        "country_model"
      ]
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": "Operations about users"
    },
    {
      "name": "user",
      "description": "Operations about users"
    },
    {
      "name": "deals",
      "description": "Operations about deals"
    },
    {
      "name": "incentive_plan",
      "description": "Operations about incentive_plans"
    },
    {
      "name": "payments",
      "description": "Operations about payments"
    },
    {
      "name": "shareholder",
      "description": "Operations about shareholders"
    },
    {
      "name": "custom_emails",
      "description": "Operations about custom_emails"
    },
    {
      "name": "deal",
      "description": "The Deal is the portal which a Company uses for its raise. Each deal will have one Company, and will have multiple investors. An Investor represents a specific investment, meaning that a User could have multiple Investments. A Deal has many complex components. The Deal will have a subscription agreement, which is the document investors will sign. The Deal will have team members which have different roles and permissions in terms of how they interact with the Deal and with Investors on the Deal. The Deal will also have payment methods set up to allow Investors to pay for their investments. These features can be accessed within the DealMaker application. To set up a Deal and interact with these features, please view our help desk documentation: [How can I set up my own deal?](https://help.dealmaker.tech/new-deal). In the production environment, a Deal’s invoice must be recorded as paid before it can be set to `active`, however this requirement is waived in the staging environment.\n\nWith the Deal Endpoints you may interact with your deals. Each Deal has a unique ID, which is accessible from the URL of any page on that Deal.",
      "x-displayName": "Deal"
    },
    {
      "name": "investor",
      "description": "Each individual investment in a deal is an Investor. Investments belong to a User, and a User may have multiple Investments, across different deals or in the same deal. Each Investor has a unique ID, which is accessible on the overview page for that Investor. The access link for each Investor will also be unique, even if multiple investors belong to the same User. If an Investor is using an Investor Profile, a snapshot of the profile will be included with the Investor payload once they are in the signed state. An Investor enters the signed state when they sign their subscription agreement. If an Investor has not yet signed their agreement, or if an Investor is created without an associated profile, then the “investor_profile” field will be `null`.",
      "x-displayName": "Investor"
    },
    {
      "name": "investor_profile",
      "description": "An Investor Profile contains information about the identity of the investor. The Investor Profile is the information which identifies how the investor’s securities will be registered, namely the type of investor, the investor’s name, and the investor’s address. There are four possible investor types: Individual, Joint (i.e. joint tenants, tenants in common, community property), Trust, and Corporation.\n\nThe profile will also contain more detailed information, depending on what type of investor it is. An individual investor will contain the date of birth and taxpayer identification number, while a corporation profile will contain information about the signing officer and beneficial owners. The investor profile will also contain the investor’s accredited investor status.\n\nAn investor profile belongs to the User. An investor profile may be created by the user themselves, when they complete an investment, or it may be created by an external API application on behalf of the user. Only a User may update their own profile - an external API application cannot update a profile on a User’s behalf. When an investment is created, it may be associated to an investor profile. A User may have many Investor Profiles, and an Investor Profile may have many Investors associated to it. This may be represented by the structure below.\n![Screenshot](https://docs.dealmaker.tech/images/investor-profile.png)\n\nAn investor profile contains all the information about an investor which is needed to complete an investment. The specific investment in a deal is done through the Investor model. The Investor model takes all the information contained in the Investor Profile and applies it to a specific investment, in a deal. When an Investor moves into the signed state (which happens the investor signs their digital subscription agreement), a snapshot is created of the Investor Profile to which that Investor is associated. This snapshot will make available the core information about that investor, including name, address, date of birth, taxpayer ID, and other fields (depending on profile type). The snapshot will reflect the information contained in the profile at the time the Investor moved into the signed state, meaning if the Investor Profile is update at a future time, any existing Investors associated with it who were in the signed (or waiting or accepted) states will not reflect the updates.\n\nAn Investor is related to a deal, but an Investor Profile is not. A User is also not related to any specific deal. A User may use an Investor Profile to create an Investor, the latter of which will be related to a specific deal.",
      "x-displayName": "Investor Profile"
    },
    {
      "name": "company",
      "description": "Access to your companies",
      "x-displayName": "Company"
    },
    {
      "name": "country",
      "description": "Access to your companies",
      "x-displayName": "Country"
    },
    {
      "name": "deal_model",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/V1_Entities_Deal\" />",
      "x-displayName": "Deal"
    },
    {
      "name": "investor_model",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/V1_Entities_Investor\" />",
      "x-displayName": "Investor"
    },
    {
      "name": "investor_profile_model",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/V1_Entities_InvestorProfile_Individual\" />",
      "x-displayName": "Investor Profile"
    },
    {
      "name": "company_model",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/V1_Entities_Company\" />",
      "x-displayName": "Company"
    },
    {
      "name": "address_model",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/V1_Entities_Address\" />",
      "x-displayName": "Address"
    },
    {
      "name": "country_model",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/V1_Entities_Country\" />",
      "x-displayName": "Country"
    },
    {
      "name": "upload",
      "description": "Presigned url for interacting with a defined S3 buckets",
      "x-displayName": "Upload"
    },
    {
      "name": "campaign",
      "description": "Company TTW campaign",
      "x-displayName": "TTW Campaign"
    },
    {
      "name": "reservation",
      "description": "TTW reservation",
      "x-displayName": "TTW reservation"
    }
  ],
  "paths": {
    "/investor_profiles/{deal_id}": {
      "get": {
        "summary": "Get list of InvestorProfiles for a specific deal",
        "description": "Get investor profiles for a specific deal. Because an investor profile belongs\n                    to the user associated with it, external applications may not use this endpoint\n                    for other profiles. Only the user may use this endpoint for their own profiles\n                    (i.e. to see existing profiles within the DealMaker application).",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page.",
            "type": "integer",
            "format": "int32",
            "default": 25,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pad a number of results.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "path",
            "name": "deal_id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "query",
            "name": "user_id",
            "description": "The user id filter.",
            "type": "integer",
            "format": "int32",
            "required": false
          }
        ],
        "security": [
          {
            "oauth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get investor profiles for a specific deal",
            "schema": {
              "$ref": "#/definitions/V1_Entities_InvestorProfiles"
            }
          },
          "401": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "investor_profile"
        ],
        "operationId": "getDealInvestorProfiles",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/investor_profiles": {
      "get": {
        "summary": "Get list of InvestorProfiles",
        "description": "Get investor profiles. Because an investor profile belongs to the user associated with it, external\n                    applications may not use this endpoint for other profiles. Only the user may use this endpoint for\n                    their own profiles (i.e. to see existing profiles within the DealMaker application).",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page.",
            "type": "integer",
            "format": "int32",
            "default": 25,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pad a number of results.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          }
        ],
        "security": [
          {
            "oauth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get investor profiles",
            "schema": {
              "$ref": "#/definitions/V1_Entities_InvestorProfiles"
            }
          },
          "401": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "investor_profile"
        ],
        "operationId": "getInvestorProfiles",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/investor_profiles/profile/{id}": {
      "get": {
        "summary": "Get an investor profile by id",
        "description": "Get an investor profile. Because an investor profile belongs to the user associated with it, external applications\n                    may not use this endpoint for other profiles. Only the user may use this endpoint for their own profiles (i.e. to\n                    see existing profiles within the DealMaker application).",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The id of the investor profile.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get an investor profile",
            "schema": {
              "$ref": "#/definitions/V1_Entities_InvestorProfileItem"
            }
          },
          "401": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "investor_profile"
        ],
        "operationId": "getInvestorProfile",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/investor_profiles/{type}/{id}": {
      "delete": {
        "summary": "Delete investor profile.",
        "description": "Deletes the investor profile.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.write"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Investor profile deleted successfully."
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "investor"
        ],
        "operationId": "deleteInvestorProfile",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/investor_profiles/corporations": {
      "post": {
        "summary": "Create new corporation investor profile.",
        "description": "Create new corporation investor profile associated to the user by email.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "InvestorProfilesCorporations",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postInvestorProfilesCorporations"
            }
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.write"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Create new corporation investor profile.",
            "schema": {
              "$ref": "#/definitions/V1_Entities_InvestorProfile_Id"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "investor_profile"
        ],
        "operationId": "createCorporationProfile",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/investor_profiles/corporations/{investor_profile_id}": {
      "patch": {
        "summary": "Patch a corporation investor profile",
        "description": "Patch corporation investor profile",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "investor_profile_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "name": "InvestorProfilesCorporations",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchInvestorProfilesCorporations"
            }
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Patch corporation investor profile",
            "schema": {
              "$ref": "#/definitions/V1_Entities_InvestorProfile_Id"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "investor_profile"
        ],
        "operationId": "patchCorporationProfile",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/investor_profiles/joints": {
      "post": {
        "summary": "Create new joint investor profile",
        "description": "Create new joint investor profile associated to the user by email.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "InvestorProfilesJoints",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postInvestorProfilesJoints"
            }
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.write"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Create new joint investor profile",
            "schema": {
              "$ref": "#/definitions/V1_Entities_InvestorProfile_Id"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "investor_profile"
        ],
        "operationId": "createJointProfile",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/investor_profiles/joints/{investor_profile_id}": {
      "patch": {
        "summary": "Patch a joint investor profile",
        "description": "Patch joint investor profile",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "investor_profile_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "name": "InvestorProfilesJoints",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchInvestorProfilesJoints"
            }
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Patch joint investor profile",
            "schema": {
              "$ref": "#/definitions/V1_Entities_InvestorProfile_Id"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "investor_profile"
        ],
        "operationId": "patchJointProfile",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/investor_profiles/individuals": {
      "post": {
        "summary": "Create new individual investor profile",
        "description": "Create new individual investor profile associated to the user by email.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "InvestorProfilesIndividuals",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postInvestorProfilesIndividuals"
            }
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.write"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Create new individual investor profile",
            "schema": {
              "$ref": "#/definitions/V1_Entities_InvestorProfile_Id"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "investor_profile"
        ],
        "operationId": "createIndividualProfile",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/investor_profiles/individuals/{investor_profile_id}": {
      "patch": {
        "summary": "Patch an individual investor profile.",
        "description": "Patch individual investor profile.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "investor_profile_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "name": "InvestorProfilesIndividuals",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchInvestorProfilesIndividuals"
            }
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Patch individual investor profile.",
            "schema": {
              "$ref": "#/definitions/V1_Entities_InvestorProfile_Id"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "investor_profile"
        ],
        "operationId": "patchIndividualProfile",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/investor_profiles/trusts": {
      "post": {
        "summary": "Create new trust investor profile.",
        "description": "Create new trust investor profile associated to the user by email.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "InvestorProfilesTrusts",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postInvestorProfilesTrusts"
            }
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.write"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Create new trust investor profile.",
            "schema": {
              "$ref": "#/definitions/V1_Entities_InvestorProfile_Id"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "investor_profile"
        ],
        "operationId": "createTrustProfile",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/investor_profiles/trusts/{investor_profile_id}": {
      "patch": {
        "summary": "Patch a trust investor profile",
        "description": "Patch trust investor profile",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "investor_profile_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "name": "InvestorProfilesTrusts",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchInvestorProfilesTrusts"
            }
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Patch trust investor profile",
            "schema": {
              "$ref": "#/definitions/V1_Entities_InvestorProfile_Id"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "investor_profile"
        ],
        "operationId": "patchTrustProfile",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/investor_profiles/managed": {
      "post": {
        "summary": "Create new managed investor profile.",
        "description": "Create new managed investor profile associated to the user by email.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "InvestorProfilesManaged",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postInvestorProfilesManaged"
            }
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.write"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Create new managed investor profile.",
            "schema": {
              "$ref": "#/definitions/V1_Entities_InvestorProfile_Id"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Forbidden"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "investor_profile"
        ],
        "operationId": "createManagedProfile",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": "const dealApi = new DealmakerApi.DealApi()\nconst payload = {\n  name: 'Provider Institution',\n  country: 'United States',\n}\n\ndealApi.createManagedProfile(payload, (error, data, response) => {\n  if (error) {\n    console.error(error)\n  } else {\n    console.log(JSON.stringify(data))\n  }\n})"
          },
          {
            "lang": "ruby",
            "source": "deal_api = DealMakerAPI::DealApi.new\n\npayload = {}\n\nprint deal_api.create_managed_profile(payload)\n"
          }
        ]
      }
    },
    "/investor_profiles/managed/{investor_profile_id}": {
      "patch": {
        "summary": "Patch managed investor profile.",
        "description": "Patch managed investor profile associated to the profile id.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "investor_profile_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "name": "InvestorProfilesManaged",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchInvestorProfilesManaged"
            }
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Patch managed investor profile.",
            "schema": {
              "$ref": "#/definitions/V1_Entities_InvestorProfile_Id"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "investor_profile"
        ],
        "operationId": "patchManagedProfile",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": "const dealApi = new DealmakerApi.DealApi()\nconst investorProfileId = 100\nconst payload = {\n  name: 'Provider Institution',\n  country: 'United States',\n}\n\ndealApi.patchManagedProfile(investorProfileId, payload, (error, data, response) => {\n  if (error) {\n    console.error(error)\n  } else {\n    console.log(JSON.stringify(data))\n  }\n})"
          },
          {
            "lang": "ruby",
            "source": "deal_api = DealMakerAPI::DealApi.new\n\ninvestor_profile_id = 100\npayload = {}\n\nprint deal_api.patch_managed_profile(investor_profile_id, payload)\n"
          }
        ]
      }
    },
    "/uploads/generate_url": {
      "post": {
        "summary": "Create a presigned URL for Amazon S3",
        "description": "Create a presigned URL for uploading file to Amazon S3 bucket",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "filename",
            "description": "The name of the file to be uploaded to S3.",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "target",
            "description": "The target is used to figure out the intended destination (which cloud provider and which bucket)",
            "type": "string",
            "enum": [
              "IDOCR",
              "GENERAL_UPLOAD"
            ],
            "required": false
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Create a presigned URL for uploading file to Amazon S3 bucket",
            "schema": {
              "$ref": "#/definitions/V1_Entities_PresignedUrlResult"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "upload"
        ],
        "operationId": "generateUrl",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/users/investments": {
      "get": {
        "summary": "Gets the investments for a specific user.",
        "description": "Get Investments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page.",
            "type": "integer",
            "format": "int32",
            "default": 25,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pad a number of results.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "email",
            "description": "The email of the user.",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.investors.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get Investments",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Investors"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "getUsersInvestments"
      }
    },
    "/users/verification/send_code": {
      "post": {
        "summary": "Sends the verification code to the user",
        "description": "Send the verification code to the user",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "login_token",
            "description": "The token containing the user information.",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Send the verification code to the user",
            "schema": {
              "$ref": "#/definitions/V1_Entities_DeleteResult"
            }
          },
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "sendVerificationCode",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/users/verification/resources": {
      "get": {
        "summary": "Gets the verification process resources",
        "description": "Get verification process resources",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "login_token",
            "description": "The token containing the user information.",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get verification process resources",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Users_VerificationResources"
            }
          },
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "getVerificationResources",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/users/{id}/verify_factor": {
      "put": {
        "summary": "Creates an API endpoint to verify an existing TOTP factor",
        "description": "Create an API endpoint to verify an existing TOTP factor",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "code",
            "description": "The verification code.",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Create an API endpoint to verify an existing TOTP factor",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Users_TwoFactorChannel"
            }
          },
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "verifyFactor",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/users/{id}/create_factor": {
      "post": {
        "summary": "Creates an API endpoint for creating a new TOTP factor",
        "description": "Create an API endpoint for creating a new TOTP factor",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Create an API endpoint for creating a new TOTP factor",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Users_Factor"
            }
          },
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "createFactor",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/users/{id}/two_factor_channels/delete/{channel}": {
      "delete": {
        "summary": "Creates an API endpoint to delete a specific two factor channel\"",
        "description": "Create an API endpoint to delete a specific two factor channel",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "channel",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "404": {
            "description": "Not found"
          },
          "204": {
            "description": "Create an API endpoint to delete a specific two factor channel",
            "schema": {
              "$ref": "#/definitions/V1_Entities_DeleteResult"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "deleteChannel",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/users/{id}/two_factor_channels": {
      "get": {
        "summary": "Creates an API endpoint to return a list of existing TOTP factor",
        "description": "Create an API endpoint to return a list of existing TOTP factor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Create an API endpoint to return a list of existing TOTP factor",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Users_TwoFactorChannels"
            }
          },
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "getTwoFactorChannels",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/users/{id}/disable_mfa": {
      "delete": {
        "summary": "Disable all the multi-factor authentication integrations for a user",
        "description": "Disable all the multi-factor authentication integrations for a user",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Disable all the multi-factor authentication integrations for a user"
          },
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "disableMfa",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/users/{id}/update_password": {
      "put": {
        "summary": "Update user password",
        "description": "Update user password",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "password",
            "description": "The new password for the user.",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "current_password",
            "description": "The current password for the user.",
            "type": "string",
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Update user password",
            "schema": {
              "$ref": "#/definitions/V1_Entities_User"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "updateUserPassword",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/users/{id}/contexts": {
      "get": {
        "summary": "Get contexts for a user",
        "description": "Get contexts for a user",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get contexts for a user",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Users_Contexts"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "getUsersIdContexts"
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get user by User ID",
        "description": "Get a single user using the User ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single user using the User ID",
            "schema": {
              "$ref": "#/definitions/V1_Entities_User"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "getUser",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/users/accessible_companies": {
      "get": {
        "summary": "Get list of all Companies accessible by the user",
        "description": "Get user accessible companies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page.",
            "type": "integer",
            "format": "int32",
            "default": 25,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pad a number of results.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          }
        ],
        "security": [
          {
            "oauth": [
              "companies.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get user accessible companies",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Company"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "getUserAccessibleCompanies",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/users/{id}/setup_sms_verification": {
      "post": {
        "summary": "Start a setup for a SMS Verification by creating a two factor channel of sms type",
        "description": "Start a setup for a SMS Verification by creating a two factor channel of sms type",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "phone_number",
            "description": "The phone number of the given user",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Start a setup for a SMS Verification by creating a two factor channel of sms type"
          },
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "setupSmsVerification",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/users/{id}/verify_sms_verification": {
      "post": {
        "summary": "Verify a SMS Verification by creating a two factor channel of sms type",
        "description": "Verify a SMS Verification by creating a two factor channel of sms type",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "phone_number",
            "description": "The phone number of the given user",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "code",
            "description": "The verification code",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Verify a SMS Verification by creating a two factor channel of sms type",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Users_TwoFactorChannel"
            }
          },
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "verifySmsVerification",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/country/states": {
      "get": {
        "summary": "Returns a list of all valid countries and it states",
        "description": "Get countries and states",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "oauth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get countries and states",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Countries"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "country"
        ],
        "operationId": "getCountryStates"
      }
    },
    "/investors/{investor_id}/transactions/request_refund/process": {
      "post": {
        "summary": "Request refund for investor transactions",
        "description": "Request refund for investor transactions",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "investor_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "404": {
            "description": "Not found"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Bad Request"
          }
        },
        "tags": [

        ],
        "operationId": "postInvestorsInvestorIdTransactionsRequestRefundProcess"
      }
    },
    "/deals/{id}/email_campaign/{email_campaign_id}/send_email": {
      "post": {
        "summary": "Send emails to all the investors invited to the material change campaign",
        "description": "Send material campaign emails",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "email_campaign_id",
            "description": "The email campaign id.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal",
              "deals.write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Emails have been scheduled to be sent to all the investors invited to the material change campaign"
          },
          "400": {
            "description": "Email campaign with id: %s is not a material change campaign"
          },
          "403": {
            "description": "Access to this resource requires scope \"deals.write\"."
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "deals"
        ],
        "operationId": "postDealsIdEmailCampaignEmailCampaignIdSendEmail"
      }
    },
    "/deals/{id}/investors/{investor_id}": {
      "put": {
        "summary": "Update a deal investor",
        "description": "Update deal investor",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "investor_id",
            "description": "The investor id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "name": "DealsIdInvestors",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putDealsIdInvestors"
            }
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.investors.write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Update deal investor",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Investor"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "investor"
        ],
        "operationId": "updateInvestor",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      },
      "patch": {
        "summary": "Patch a deal investor",
        "description": "Patch deal investor",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "investor_id",
            "description": "The investor id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "investor_profile_id",
            "description": "Investor profile id that needs to be set on investor",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "current_step",
            "description": "Step on checkout page.",
            "type": "string",
            "default": "contact-information",
            "enum": [
              "contact-information",
              "investor-confirmation"
            ],
            "required": false
          }
        ],
        "security": [
          {
            "oauth": [
              "internal",
              "deals.investors.write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Patch deal investor",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Investor"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "investor"
        ],
        "operationId": "patchInvestor",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      },
      "get": {
        "summary": "Get a deal investor by id",
        "description": "Gets a single investor by the id.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "investor_id",
            "description": "The investor id.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.investors.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get deal investor",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Investor"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "investor"
        ],
        "operationId": "getInvestor",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": "const dealApi = new Dealmakerapi.DealApi()\nconst dealId = 56\nconst id = 56\n\ndealApi.getInvestor(dealId, id, (error, data, response) => {\n  if (error) {\n    console.error(error)\n  } else {\n    console.log(JSON.stringify(data))\n  }\n})"
          },
          {
            "lang": "ruby",
            "source": "deal_api = DealMakerAPI::DealApi.new\ndeal_id = 56\nid = 56\n\n# Get a deal investor by id\nprint deal_api.get_investor(deal_id, id)"
          }
        ]
      }
    },
    "/deals/{id}/investors/{investor_id}/otp_access_link": {
      "get": {
        "summary": "Get OTP access link for deal investor",
        "description": "The access link for the investor. This is the access link for the specific investment, not the user.\n                      If the same user has multiple investments, each one will have a different access link.\n                      Please note that this access link expires every hour. In order to redirect the investor into their authentication screen,\n                      use the https://app.dealmaker.tech/deals/{{deal_id}}/investors/{{investor_id}}/otp_access url.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "investor_id",
            "description": "The investor id.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.investors.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get OTP access link for deal investor",
            "schema": {
              "$ref": "#/definitions/V1_Entities_InvestorOtpAccessLink"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "investor"
        ],
        "operationId": "getInvestorOtpLink",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/deals/{id}/investors": {
      "get": {
        "summary": "List deal investors",
        "description": "List deal investors according to the specified search criteria.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page.",
            "type": "integer",
            "format": "int32",
            "default": 25,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pad a number of results.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "query",
            "name": "investor_ids",
            "description": "An array of investor ids.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "q",
            "description": "The search query for investors. For additional information on filtering and seach, click [here](#section/Search-and-Filtering-(The-q-parameter)/Keyword-filtering)",
            "type": "string",
            "required": false
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.investors.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List deal investors",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Investors"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "investor"
        ],
        "operationId": "listInvestors",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": "const dealApi = new Dealmakerapi.DealApi()\nconst dealId = 56\nconst investorId = [null]\n\ndealApi.listInvestors(dealId, investorId, (error, data, response) => {\n  if (error) {\n    console.error(error)\n  } else {\n    console.log(JSON.stringify(data))\n  }\n})"
          },
          {
            "lang": "ruby",
            "source": "deal_api = DealMakerAPI::DealApi.new\ndeal_id = 56\ninvestor_id = [37]\n\n# List deal investors\nprint deal_api.list_investors(deal_id, investor_id)"
          }
        ]
      },
      "post": {
        "summary": "Create a deal investor",
        "description": "Create a single deal investor.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "name": "DealsIdInvestors",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postDealsIdInvestors"
            }
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.investors.write"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Create deal investor",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Investor"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "investor"
        ],
        "operationId": "createInvestor",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": "const dealApi = new Dealmakerapi.DealApi()\nconst dealId = 56\n\nconst investorDetails = {\n  email: 'test@example.com',\n  first_name: 'First Name',\n  last_name: 'Last Name',\n}\n\ndealApi.createInvestor(dealId, investorDetails, (error, data, response) => {\n  if (error) {\n    console.error(error)\n  } else {\n    console.log(JSON.stringify(data))\n  }\n})"
          },
          {
            "lang": "ruby",
            "source": "deal_api = DealMakerAPI::DealApi.new\n\ndeal_id = 100\n\nprint deal_api.create_investor(deal_id, {\n  email: 'test@example.com',\n  first_name: 'First Name',\n  last_name: 'Last Name'\n})"
          }
        ]
      }
    },
    "/deals/{id}/investors/{investor_id}/incentive_plan": {
      "get": {
        "summary": "Get investor incentive plan by investor id",
        "description": "Gets a single investor incentive plan by the investor id.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "investor_id",
            "description": "The investor id.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.investors.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get deal investor incentive plan",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Deals_PriceDetails"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "investor"
        ],
        "operationId": "getIncentivePlan",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/deals/{id}/investors/{investor_id}/delete_document/{document_id}": {
      "delete": {
        "summary": "Delete document for deal investor",
        "description": "Delete document for deal investor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "investor_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "document_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.investors.write"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Document deleted successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "investor"
        ],
        "operationId": "deleteDocument",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/deals/{id}/investors/{investor_id}/add_document": {
      "post": {
        "summary": "Add document for deal investor",
        "description": "Add document for deal investor",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "investor_id",
            "description": "The investor id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "type",
            "description": "Document type.",
            "type": "string",
            "default": "regular",
            "enum": [
              "regular",
              "AML/KYC"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "file",
            "description": "File to upload.",
            "type": "file",
            "required": true
          },
          {
            "in": "formData",
            "name": "caption",
            "description": "The caption.",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_entity_id",
            "description": "Search entity id.",
            "type": "integer",
            "format": "int32",
            "required": false
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.investors.write"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Add document for deal investor",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Investor"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "investor"
        ],
        "operationId": "addDocument",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/deals/{id}/incentive_plan": {
      "get": {
        "summary": "Get incentive plan by deal id",
        "description": "Gets the current active incentive plan for the given deal id.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "query",
            "name": "investment_amount",
            "description": "The investment amount to get the security price for.",
            "type": "number",
            "format": "float",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get deal incentive plan",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Deals_PriceDetails"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "deal"
        ],
        "operationId": "getDealIncentivePlan",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": "const dealApi = new Dealmakerapi.DealApi()\nconst dealId = 100\n\napi.getDealIncentivePlan(dealId, function(error, data, response) {\n  if (error) {\n    console.error(error)\n  } else {\n    console.log(JSON.stringify(data))\n  }\n})\n"
          },
          {
            "lang": "ruby",
            "source": "deal_api = DealMakerAPI::DealApi.new\n\ndeal_id = 100\n\nprint deal_api.get_deal_incentive_plan(deal_id)\n"
          }
        ]
      }
    },
    "/deals": {
      "get": {
        "summary": "List available deals",
        "description": "List available deals",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page.",
            "type": "integer",
            "format": "int32",
            "default": 25,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pad a number of results.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.read",
              "deals.information.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List available deals",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Deals"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "deal"
        ],
        "operationId": "listDeals",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/deals/{id}": {
      "get": {
        "summary": "Get deal by Deal ID",
        "description": "Gets a single deal using the Deal ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.read",
              "deals.information.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a single deal using the Deal ID",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Deal"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "deal"
        ],
        "operationId": "getDeal",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": "const dealApi = new Dealmakerapi.DealApi()\nconst dealId = 100\n\napi.getDeal(dealId, function(error, data, response) {\n  if (error) {\n    console.error(error)\n  } else {\n    console.log(JSON.stringify(data))\n  }\n})"
          },
          {
            "lang": "ruby",
            "source": "deal_api = DealMakerAPI::DealApi.new\n\ndeal_id = 100\n\nprint deal_api.get_deal(deal_id)"
          }
        ]
      }
    },
    "/deals/{id}/incentive_plans/{incentive_plan_id}": {
      "patch": {
        "summary": "Updates incentive plan by deal id",
        "description": "Updates an incentive plan for the given deal id with respective tiers.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "incentive_plan_id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "active_at",
            "description": "The incentive plan active date.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "formData",
            "name": "funded_by_offset",
            "description": "The incentive plan funded by offset in days.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "tiers[id]",
            "description": "The incentive plan tier id. If none, it will be created",
            "type": "array",
            "required": false,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "formData",
            "name": "tiers[_delete]",
            "description": "If true, this entry will be cleared.",
            "type": "array",
            "required": false,
            "items": {
              "type": "boolean"
            }
          },
          {
            "in": "formData",
            "name": "tiers[incentive_percentage]",
            "description": "The incentive plan tier percentage.",
            "type": "array",
            "required": false,
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "in": "formData",
            "name": "tiers[end_at]",
            "description": "The incentive plan tier end date.",
            "type": "array",
            "required": false,
            "items": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Updates deal incentive plan",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Deals_PriceDetails"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "incentive_plan"
        ],
        "operationId": "patchDealIncentivePlan",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": "const dealApi = new Dealmakerapi.DealApi()\nconst dealId = 100\n\napi.patchDealIncentivePlan(dealId, function(error, data, response) {\n  if (error) {\n    console.error(error)\n  } else {\n    console.log(JSON.stringify(data))\n  }\n})\n\nconst incentivePlanDetails = {\n  'funded_by_offset': 1,\n  'active_at': '2023-11-29T23:59:59Z',\n  'tiers': [\n    {\n      'incentive_percentage': 0.1,\n      'end_at': '2023-12-08T23:59:59Z'\n    }\n  ]\n}\n\ndealApi.patchDealIncentivePlan(dealId, incentivePlanDetails, (error, data, response) => {\n  if (error) {\n    console.error(error)\n  } else {\n    console.log(JSON.stringify(data))\n  }\n})\n"
          },
          {
            "lang": "ruby",
            "source": "deal_api = DealMakerAPI::DealApi.new\n\ndeal_id = 100\n\nprint deal_api.get_deal_incentive_plan(deal_id)\n"
          }
        ]
      }
    },
    "/deals/{id}/incentive_plans": {
      "post": {
        "summary": "Creates incentive plan by deal id",
        "description": "Creates an incentive plan for the given deal id with respective tiers.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "active_at",
            "description": "The incentive plan active date.",
            "type": "string",
            "format": "date-time",
            "required": true
          },
          {
            "in": "formData",
            "name": "funded_by_offset",
            "description": "The incentive plan funded by offset in days.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "tiers[incentive_percentage]",
            "description": "The incentive plan tier percentage.",
            "type": "array",
            "required": true,
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "in": "formData",
            "name": "tiers[end_at]",
            "description": "The incentive plan tier end date.",
            "type": "array",
            "required": true,
            "items": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.write"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Creates deal incentive plan",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Deals_PriceDetails"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "incentive_plan"
        ],
        "operationId": "postDealIncentivePlan",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": "const dealApi = new Dealmakerapi.DealApi()\nconst dealId = 100\n\napi.postDealIncentivePlan(dealId, function(error, data, response) {\n  if (error) {\n    console.error(error)\n  } else {\n    console.log(JSON.stringify(data))\n  }\n})\n\nconst incentivePlanDetails = {\n  'funded_by_offset': 1,\n  'active_at': '2023-11-29T23:59:59Z',\n  'tiers': [\n    {\n      'incentive_percentage': 0.1,\n      'end_at': '2023-12-08T23:59:59Z'\n    }\n  ]\n}\n\ndealApi.postDealIncentivePlan(dealId, incentivePlanDetails, (error, data, response) => {\n  if (error) {\n    console.error(error)\n  } else {\n    console.log(JSON.stringify(data))\n  }\n})\n"
          },
          {
            "lang": "ruby",
            "source": "deal_api = DealMakerAPI::DealApi.new\n\ndeal_id = 100\n\nprint deal_api.get_deal_incentive_plan(deal_id)\n"
          }
        ]
      }
    },
    "/deals/{id}/incentive_plans/time": {
      "get": {
        "summary": "Get incentive plans by deal id",
        "description": "Gets incentive plans with time tiers from the deal given deal id.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page.",
            "type": "integer",
            "format": "int32",
            "default": 25,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pad a number of results.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get incentive plans with tiers from the deal",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Deals_PriceDetails"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "incentive_plan"
        ],
        "operationId": "getDealIncentivePlansTime",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": "const dealApi = new Dealmakerapi.DealApi()\nconst dealId = 100\n\napi.getDealIncentivePlansTime(dealId, function(error, data, response) {\n  if (error) {\n    console.error(error)\n  } else {\n    console.log(JSON.stringify(data))\n  }\n})\n"
          },
          {
            "lang": "ruby",
            "source": "deal_api = DealMakerAPI::DealApi.new\n\ndeal_id = 100\n\nprint deal_api.get_deal_incentive_plans_time(deal_id)\n"
          }
        ]
      }
    },
    "/deals/{id}/script_tag_environment": {
      "put": {
        "summary": "Update script tag environment for the deal.",
        "description": "Update script tag environment for the deal.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "is_production",
            "description": "True if environment is production.",
            "type": "boolean",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "deals"
        ],
        "operationId": "putDealsIdScriptTagEnvironment"
      }
    },
    "/deals/{id}/investors/{investor_id}/add_506c_document": {
      "post": {
        "summary": "Add 506c document for deal investor",
        "description": "Add 506c document for deal investor",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "investor_id",
            "description": "The investor id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "file",
            "description": "File to upload",
            "type": "file",
            "required": true
          },
          {
            "in": "formData",
            "name": "caption",
            "description": "The caption",
            "type": "string",
            "required": false
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.investors.write"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Add 506c document for deal investor",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Investor"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "investor"
        ],
        "operationId": "add506cDocument",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/deals/{id}/investors/bulk_upload": {
      "post": {
        "summary": "Bulk upload investors for deal investor",
        "description": "Bulk upload investors",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "import_file",
            "description": "The CSV file with data to upload.",
            "type": "file",
            "required": true
          },
          {
            "in": "formData",
            "name": "alerts_email",
            "description": "The email to send alerts to.",
            "type": "string",
            "required": false
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.investors.write"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Bulk upload investors",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Investor"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "investor"
        ],
        "operationId": "bulkUploadInvestors",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/deals/{id}/investors/{investor_id}/edit_tags": {
      "post": {
        "summary": "Append or replace tag(s) for a specific investor",
        "description": "Edit investor tag",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "tags",
            "description": "The list of tags.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "formData",
            "name": "mode",
            "description": "The type of request for the tag(s): \"append\" or \"replace\".",
            "type": "string",
            "default": "append",
            "enum": [
              "append",
              "replace"
            ],
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "investor_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.investors.write"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Edit investor tag",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Investor"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "investor"
        ],
        "operationId": "editInvestorTags",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/deals/{id}/investors/{investor_id}/search_entities": {
      "get": {
        "summary": "Get the search entities attached to the investor",
        "description": "Get the entities that needs to be updated due to wrong information.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "investor_id",
            "description": "The investor id.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.investors.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get the search entities attached to the investor",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Investor_SearchEntities"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "investor"
        ],
        "operationId": "getDealInvestorSearchEntities",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": "const dealApi = new DealmakerApi.DealApi()\nconst dealId = 56\nconst investorId = 56\n\ndealApi.getDealInvestorSearchEntities(dealId, investorId, (error, data, response) => {\n  if (error) {\n    console.error(error)\n  } else {\n    console.log(JSON.stringify(data))\n  }\n})"
          },
          {
            "lang": "ruby",
            "source": "const dealApi = new DealmakerApi.DealApi()\nconst dealId = 56\nconst investorId = 56\n\n# Get a deal investor by id\nprint dealApi.getDealInvestorSearchEntities(dealId, investorId)"
          }
        ]
      }
    },
    "/deals/{id}/investors/{investor_id}/payments/express_wire/instructions": {
      "get": {
        "summary": "Displays the express wire instructions for an investor on a deal",
        "description": "Get express wire instructions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "investor_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.investors.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get express wire instructions",
            "schema": {
              "$ref": "#/definitions/V1_Entities_ExpressWireInstruction"
            }
          },
          "404": {
            "description": "Not found"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [

        ],
        "operationId": "getDealsIdInvestorsInvestorIdPaymentsExpressWireInstructions"
      }
    },
    "/deals/{id}/investors/payments/express_wire/instructions": {
      "get": {
        "summary": "Displays the express wire instructions for all the investors on a deal",
        "description": "Get list of express wire instructions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.investors.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get list of express wire instructions",
            "schema": {
              "$ref": "#/definitions/V1_Entities_ExpressWireInstructions"
            }
          },
          "404": {
            "description": "Not found"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [

        ],
        "operationId": "getDealsIdInvestorsPaymentsExpressWireInstructions"
      }
    },
    "/deals/{id}/investors/{investor_id}/payments/ira": {
      "post": {
        "summary": "Creates a payment intent for express wire and mail its instructions.",
        "description": "Creates a payment intent for express wire",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "investor_id",
            "description": "The investor id.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "payments"
        ],
        "operationId": "postDealInvestorPaymentsIra",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/deals/{id}/investor/{investor_id}/subscription/{subscription_id}/payments/ach/bank_account_setup_intent": {
      "get": {
        "summary": "Prepares an investor for payment",
        "description": "Prepare investor for payment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "investor_id",
            "description": "The investor id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "subscription_id",
            "description": "The subscription id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Prepare investor for payment",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Deals_Investors_Payment_Ach_BankAccountSetupIntent"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "deal"
        ],
        "operationId": "AchBankAccountSetupIntent",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/deals/{id}/investor/{investor_id}/subscription/{subscription_id}/payments/acss/bank_account_setup_intent": {
      "get": {
        "summary": "Prepares an investor for payment",
        "description": "Prepare investor for payment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "investor_id",
            "description": "The investor id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "subscription_id",
            "description": "The subscription id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Prepare investor for payment",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Deals_Investors_Payment_Acss_BankAccountSetupIntent"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "deal"
        ],
        "operationId": "AcssBankAccountSetupIntent",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/deals/{id}/investors/{investor_id}/background_checks/{search_entity_id}/enforcements": {
      "get": {
        "summary": "Get enforcements for a background search",
        "description": "Get enforcements for a background search",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "investor_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "search_entity_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.investors.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get enforcements for a background search",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Investor"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "investor"
        ],
        "operationId": "getEnforcements",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/deals/{id}/investors/{investor_id}/background_checks/run": {
      "post": {
        "summary": "Run Alloy background search for the investor",
        "description": "Run Alloy background search for the investor",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "search_entity_ids",
            "description": "An array of search entity ids.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "investor_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Run Alloy background search for the investor"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "investor"
        ],
        "operationId": "runBackgroundSearch",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/deals/{id}/investors/{investor_id}/background_checks/{search_entity_id}/send_review": {
      "post": {
        "summary": "Request new document for a specific entity",
        "description": "Request new document to entity",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "type",
            "description": "The type of request.",
            "type": "string",
            "enum": [
              "incomplete",
              "approved",
              "additional_docs_requested",
              "flagged"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "message",
            "description": "The message added by the reviewer.",
            "type": "string",
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "investor_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "search_entity_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Request new document to entity"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "investor"
        ],
        "operationId": "requestNewDocument",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/deals/{deal_id}/payment_onboarding/questionnaire/qualification_questionnaire/response/submit": {
      "post": {
        "summary": "Submit a qualification questionnaire response",
        "description": "Submit a qualification questionnaire response",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deal_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Submit a qualification questionnaire response"
          },
          "403": {
            "description": "Access to this resource requires scope \"internal\"."
          }
        },
        "tags": [

        ],
        "operationId": "postDealsDealIdPaymentOnboardingQuestionnaireQualificationQuestionnaireResponseSubmit"
      }
    },
    "/deals/{deal_id}/payment_onboarding/questionnaire/qualification_questionnaire/submit": {
      "post": {
        "summary": "Submit a qualification questionnaire form",
        "description": "Submit a qualification questionnaire form",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deal_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Submit a qualification questionnaire form",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Payments_SelfServeOnboarding_QualificationQuestionnaire_Result"
            }
          },
          "403": {
            "description": "Access to this resource requires scope \"internal\"."
          }
        },
        "tags": [

        ],
        "operationId": "postDealsDealIdPaymentOnboardingQuestionnaireQualificationQuestionnaireSubmit"
      }
    },
    "/deals/{deal_id}/payment_onboarding/questionnaire/payout_account_details/data": {
      "get": {
        "summary": "Get payout account data",
        "description": "Get payout account data",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deal_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get payout account data",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Payments_SelfServeOnboarding_PayoutAccountDetails_Data"
            }
          },
          "403": {
            "description": "Access to this resource requires scope \"internal\"."
          }
        },
        "tags": [

        ],
        "operationId": "getDealsDealIdPaymentOnboardingQuestionnairePayoutAccountDetailsData"
      }
    },
    "/deals/{deal_id}/payment_onboarding/questionnaire/payout_account_details/submit": {
      "post": {
        "summary": "Submit a payout account details form",
        "description": "Submit a payout account details form",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deal_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Submit a payout account details form",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Payments_SelfServeOnboarding_PayoutAccountDetails_Result"
            }
          },
          "403": {
            "description": "Access to this resource requires scope \"internal\"."
          }
        },
        "tags": [

        ],
        "operationId": "postDealsDealIdPaymentOnboardingQuestionnairePayoutAccountDetailsSubmit"
      }
    },
    "/deals/{deal_id}/payment_onboarding/questionnaire/digital_payments_connection/data": {
      "get": {
        "summary": "Load data for the digital payments connection stage",
        "description": "Load data for the digital payments connection stage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deal_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Load data for the digital payments connection stage",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Payments_SelfServeOnboarding_DigitalPaymentsConnection_Data"
            }
          },
          "403": {
            "description": "Access to this resource requires scope \"internal\"."
          }
        },
        "tags": [

        ],
        "operationId": "getDealsDealIdPaymentOnboardingQuestionnaireDigitalPaymentsConnectionData"
      }
    },
    "/deals/payment_onboarding/questionnaire/initial_questions": {
      "get": {
        "summary": "Get initial questions",
        "description": "Get initial questions",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get initial questions"
          },
          "403": {
            "description": ""
          }
        },
        "tags": [

        ],
        "operationId": "getDealsPaymentOnboardingQuestionnaireInitialQuestions"
      }
    },
    "/deals/{id}/progress_page": {
      "get": {
        "summary": "Get deal progress",
        "description": "Get deal progress",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get deal progress",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Deals_Progress"
            }
          },
          "404": {
            "description": "Not found"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [

        ],
        "operationId": "getDealsIdProgressPage"
      }
    },
    "/deals/{id}/progress_page/summary": {
      "get": {
        "summary": "Get the deal progress summary",
        "description": "Get the deal progress summary",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get the deal progress summary",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Deals_ProgressPage_Summary"
            }
          },
          "404": {
            "description": "Not found"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [

        ],
        "operationId": "getDealsIdProgressPageSummary"
      }
    },
    "/deals/{id}/platform_emails/domain": {
      "patch": {
        "summary": "Update the email domain settings for the deal",
        "description": "Update the email domain settings for the deal",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "sender_name",
            "description": "The sender name.",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "sender_email",
            "description": "The sender email. It must match an authenticated domain.",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.write"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Update the email domain settings for the deal"
          },
          "404": {
            "description": "Not found"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [

        ],
        "operationId": "patchDealsIdPlatformEmailsDomain"
      },
      "get": {
        "summary": "Get the email domain settings for the deal",
        "description": "Get the email domain settings for the deal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The deal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get the email domain settings for the deal",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Deals_PlatformEmails_DomainSettings"
            }
          },
          "404": {
            "description": "Not found"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [

        ],
        "operationId": "getDealsIdPlatformEmailsDomain"
      }
    },
    "/deals/{id}/summary": {
      "get": {
        "summary": "Get Deal Overview",
        "description": "Get Deal Overview",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.read",
              "deals.information.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get Deal Overview"
          },
          "404": {
            "description": "Not found"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [

        ],
        "operationId": "getDealsIdSummary"
      }
    },
    "/deal_setups": {
      "post": {
        "summary": "Create deal setup",
        "description": "Create deal setup",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "invoicing_email",
            "description": "The invoice email address.",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "issuer_industry",
            "description": "The industry.",
            "type": "string",
            "default": "other",
            "enum": [
              "other",
              "beverage",
              "blockchain",
              "cannabis",
              "cpc",
              "gaming",
              "health",
              "industry",
              "mining",
              "real_estate",
              "retail",
              "tech",
              "psychedelics",
              "office_of_life_sciences",
              "office_of_energy_and_transportation",
              "office_of_real_estate_and_construction",
              "office_of_manufacturing",
              "office_of_technology",
              "office_of_trade_and_services",
              "office_of_finance",
              "office_of_international_corp_fin"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "prohibited_industry",
            "description": "Determine if the deal is a high risk or not.",
            "type": "string",
            "default": "prohibited",
            "enum": [
              "prohibited",
              "not_prohibited"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "offering_type",
            "description": "The deal kind",
            "type": "string",
            "default": "other",
            "enum": [
              "other",
              "canadian_private_placement",
              "regulation_a_plus_offering",
              "offering_memorandum",
              "regulation_cf_offering",
              "reg_d_506_c",
              "reg_d_506_b",
              "reg_s"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "title",
            "description": "The name of deal to setup.",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "company_id",
            "description": "the company id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "representative",
            "description": "The email of the representative.",
            "type": "string",
            "required": false
          }
        ],
        "security": [
          {
            "oauth": [
              "deals.write"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Create deal setup",
            "schema": {
              "$ref": "#/definitions/V1_Entities_DealSetup"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "deal"
        ],
        "operationId": "createDealSetup",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies/{id}/news_releases/email_templates": {
      "post": {
        "summary": "Creates an email template",
        "description": "Create new email template",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "description": "The name of the email template",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "json_content",
            "description": "The json content of the email template",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "html_content",
            "description": "The HTML content markup",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Create new email template",
            "schema": {
              "$ref": "#/definitions/V1_Entities_EmailTemplate"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "createEmailTemplate",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      },
      "get": {
        "summary": "Get list of email template",
        "description": "Get list of email template",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The company id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "The number of items per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "required": false
          },
          {
            "in": "query",
            "name": "public_template",
            "description": "The public template",
            "type": "boolean",
            "default": false,
            "required": false
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get list of email template",
            "schema": {
              "$ref": "#/definitions/V1_Entities_EmailTemplate"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "getEmailTemplates",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies/{id}/shareholders/tags": {
      "get": {
        "summary": "Get a company shareholders list grouped by tags",
        "description": "Gets a list of company shareholders grouped by tags.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The company id.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List company shareholders grouped by tags",
            "schema": {
              "$ref": "#/definitions/V1_Entities_ShareholdersTags"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "shareholder"
        ],
        "operationId": "getShareholdersTags",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies/{id}/shareholders": {
      "get": {
        "summary": "Get a company shareholders list",
        "description": "Gets a list of company shareholders.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The company id.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List company shareholders",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Shareholders"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "shareholder"
        ],
        "operationId": "getShareholders",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies/{company_communication_id}/email_events": {
      "get": {
        "summary": "Get a list of email events for a company communication",
        "description": "Gets a list of email events for a specific company communication.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "company_communication_id",
            "description": "The id of the company communication.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List email events for company communications",
            "schema": {
              "$ref": "#/definitions/V1_Entities_EmailEvents"
            }
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "getEmailEvents",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies": {
      "post": {
        "summary": "Create new company",
        "description": "Creates a new company.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "description": "The company name",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "country",
            "description": "The country of the company",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "street",
            "description": "The street of the company",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "line_2",
            "description": "The second line of the address of the company",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "city",
            "description": "The city of the company",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "state",
            "description": "The state of the company",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "postal_code",
            "description": "The postal code/zip code of the company",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "primary_color",
            "description": "The primary color of the company",
            "type": "string",
            "required": false
          }
        ],
        "security": [
          {
            "oauth": [
              "companies.write"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Create new company",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Company"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "createCompany",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      },
      "get": {
        "summary": "Get list of Companies",
        "description": "Get companies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page.",
            "type": "integer",
            "format": "int32",
            "default": 25,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pad a number of results.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          }
        ],
        "security": [
          {
            "oauth": [
              "companies.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get companies",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Company"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "getCompanies",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies/{id}": {
      "get": {
        "summary": "Get a Company",
        "description": "Get a Company.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "companies.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get company",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Company"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "getCompany",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies/{id}/shareholder_ledger": {
      "get": {
        "summary": "Get shareholder ledger by company",
        "description": "Get shareholder ledger by company.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "companies.read",
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get shareholder ledger",
            "schema": {
              "$ref": "#/definitions/V1_Entities_ShareholderLedger"
            }
          },
          "401": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "getShareholderLedger",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies/{company_id}/portal/dividends": {
      "get": {
        "summary": "Return dividends",
        "description": "Return dividends associated with a shareholder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "company_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Dividends"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "getDividends",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies/{id}/documents/bulk_uploads": {
      "get": {
        "summary": "Return bulk uploads",
        "description": "Return bulk uploads",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page.",
            "type": "integer",
            "format": "int32",
            "default": 25,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pad a number of results.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/V1_Entities_BulkUploads"
            }
          },
          "403": {
            "description": "Access to this resource requires scope \"internal\"."
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "getBulkUploads",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      },
      "post": {
        "summary": "Create bulk upload record",
        "description": "Create bulk upload record",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The company id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "file_identifier",
            "description": "The file identifier",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "document_type",
            "description": "The document type",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "upload_name",
            "description": "The bulk upload name",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "send_notification",
            "description": "Send notification to the user",
            "type": "boolean",
            "required": true
          },
          {
            "in": "formData",
            "name": "notification_message",
            "description": "Notification message",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "json_notification_message",
            "description": "JSON notification message",
            "type": "json",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/V1_Entities_BulkUpload"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "createBulkUpload",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies/{id}/documents/bulk_uploads/{bulk_upload_id}": {
      "get": {
        "summary": "Return a given bulk upload by id",
        "description": "Return a given bulk upload by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page.",
            "type": "integer",
            "format": "int32",
            "default": 25,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pad a number of results.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "bulk_upload_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/V1_Entities_BulkUpload"
            }
          },
          "403": {
            "description": "Access to this resource requires scope \"internal\"."
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "getBulkUpload",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies/{company_id}/documents/bulk_uploads/{bulk_upload_id}/details/grouped_errors": {
      "get": {
        "summary": "Return bulk upload details grouped by status",
        "description": "Return bulk upload details grouped by status",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "company_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "bulk_upload_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/V1_Entities_BulkUploadDetails"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "getDetailsErrorsGrouped",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies/{company_id}/documents/bulk_uploads/{bulk_upload_id}/details/errors": {
      "get": {
        "summary": "Returns a full list of details with errors of the given bulk upload ordered by status desc and id asc",
        "description": "Returns a full list of details with errors of the given bulk upload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "company_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "bulk_upload_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/V1_Entities_BulkUploadDetails"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "getBulkUploadDetailsErrors",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies/{company_id}/documents/bulk_uploads/{bulk_upload_id}/details": {
      "post": {
        "summary": "Create a BulkUploadDetail class record",
        "description": "Create a BulkUploadDetail class record",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bulk_upload_id",
            "description": "The Bulk upload ID from which detail is associated with",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "file_key",
            "description": "The file ID",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "file_name",
            "description": "The name of the file",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "status",
            "description": "The status of the bulk upload detail",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "path",
            "name": "company_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Create a BulkUploadDetail class record",
            "schema": {
              "$ref": "#/definitions/V1_Entities_BulkUploadDetail"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not found"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "createBulkUploadDetail",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies/{id}/documents/test_upload_email": {
      "post": {
        "summary": "Send document upload test email to given user",
        "description": "Send document upload test email to given user",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "user_id",
            "description": "The user that will receive the email.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "send_confidential_email",
            "description": "The send_confidential_email flag",
            "type": "boolean",
            "required": true
          },
          {
            "in": "formData",
            "name": "json_email",
            "description": "The json content email",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Send document upload test email to given user"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "testDocumentUploadEmail",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies/{company_id}/shareholders/{shareholder_id}/actions": {
      "post": {
        "summary": "Create a shareholder action",
        "description": "Create a shareholder action",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "company_id",
            "description": "The company id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "shareholder_id",
            "description": "The shareholder id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "request_type",
            "description": "The request type of the shareholder action",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "description",
            "description": "The description of the shareholder action",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "request_documents",
            "description": "The document associated with the shareholder action",
            "type": "array",
            "items": {
              "type": "file"
            },
            "required": false
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/V1_Entities_GenericResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "createShareholderAction",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies/{id}/shareholders/{shareholder_id}/send_portal_invite": {
      "post": {
        "summary": "Send portal invite to shareholder",
        "description": "Send portal invite to shareholder.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "subject",
            "description": "The custom subject of the invite email",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "email_content",
            "description": "The custom email content of the invite email",
            "type": "string",
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "shareholder_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "sendPortalInvite",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies/{id}/news_releases/email_templates/{template_id}": {
      "delete": {
        "summary": "Deletes an email template",
        "description": "Delete an email template",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The company id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "template_id",
            "description": "The email template id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an email template"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not found"
          },
          "401": {
            "description": "You must be the company admin to perform this action"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "deleteEmailTemplate",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      },
      "get": {
        "summary": "Get an email template",
        "description": "Get an email template",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The company id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "template_id",
            "description": "The email template id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get an email template",
            "schema": {
              "$ref": "#/definitions/V1_Entities_EmailTemplate"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "getEmailTemplate",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies/{id}/members/bulk_uploads": {
      "get": {
        "summary": "Get bulk uploads records",
        "description": "Get members bulk uploads records",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The company id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/V1_Entities_MembersBulkUploads"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "getMembersBulkUploads",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      },
      "post": {
        "summary": "Create bulk upload record",
        "description": "Create members bulk upload record",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The company id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "csv_file",
            "description": "The file csv",
            "type": "file",
            "required": true
          },
          {
            "in": "formData",
            "name": "send_notification",
            "description": "Send notification to the user",
            "type": "boolean",
            "default": false,
            "required": false
          },
          {
            "in": "formData",
            "name": "offsite_shareholder",
            "description": "Offside shareholder",
            "type": "boolean",
            "default": false,
            "required": false
          },
          {
            "in": "formData",
            "name": "email_subject",
            "description": "Email subject",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "email_content",
            "description": "Email content",
            "type": "string",
            "required": false
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/V1_Entities_MembersBulkUpload"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "createMembersBulkUpload",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/companies/{id}/members/bulk_uploads/{id_members_bulk_upload}": {
      "get": {
        "summary": "Get bulk upload record",
        "description": "Get members bulk upload record",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The company id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "id_members_bulk_upload",
            "description": "The bulk upload id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/V1_Entities_MembersBulkUpload"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "company"
        ],
        "operationId": "getMembersBulkUpload",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/custom_emails/get_access_token": {
      "post": {
        "summary": "Generate authorization token information for initializing Beefree editor",
        "description": "Generate authorization token information",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "user_id",
            "description": "The user ID",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Generate authorization token information",
            "schema": {
              "$ref": "#/definitions/V1_Entities_BeefreeAccessToken"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not found"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "custom_emails"
        ],
        "operationId": "getAccessToken",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/webhooks/security_token": {
      "get": {
        "summary": "Creates a new security token for webhook subscription",
        "description": "Creates a new security token for webhook subscription",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "oauth": [
              "internal",
              "webhooks.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Creates a new security token for webhook subscription",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Webhooks_SecurityToken"
            }
          },
          "403": {
            "description": "Do not have access to this action"
          },
          "400": {
            "description": "Validation error"
          }
        },
        "tags": [

        ],
        "operationId": "getWebhooksSecurityToken"
      }
    },
    "/webhooks/deals/search": {
      "get": {
        "summary": "Searches for deals for a given user",
        "description": "Searches for deals for a given user",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "oauth": [
              "internal",
              "webhooks.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Searches for deals for a given user",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Webhooks_SecurityToken"
            }
          },
          "403": {
            "description": "Do not have access to this action"
          },
          "400": {
            "description": "Validation error"
          }
        },
        "tags": [

        ],
        "operationId": "getWebhooksDealsSearch"
      }
    },
    "/webhooks/deal/{id}": {
      "get": {
        "summary": "Finds a deal using the id",
        "description": "Returns a deal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal",
              "webhooks.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a deal",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Webhooks_Deal"
            }
          },
          "403": {
            "description": "Do not have access to this action"
          },
          "400": {
            "description": "Validation error"
          }
        },
        "tags": [

        ],
        "operationId": "getWebhooksDealId"
      }
    },
    "/webhooks/{id}": {
      "put": {
        "summary": "Updates webhook subscription and webhooks subcription deals",
        "description": "Updates webhook subscription",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "description": "Endpoint name",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "enabled",
            "description": "Endpoint status",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "url",
            "description": "Payload URL",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "security_token",
            "description": "Secret key",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "webhook_subscription_deals[id]",
            "description": "The id of the webhook subscription deal",
            "type": "array",
            "required": false,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "formData",
            "name": "webhook_subscription_deals[deal_id]",
            "description": "The id of the deal to link",
            "type": "array",
            "required": false,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "formData",
            "name": "webhook_subscription_deals[_destroy]",
            "description": "",
            "type": "array",
            "required": false,
            "items": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal",
              "webhooks.write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Updates webhook subscription",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Webhooks_Subscription"
            }
          },
          "403": {
            "description": "Do not have access to this action"
          },
          "400": {
            "description": "Validation error"
          }
        },
        "tags": [

        ],
        "operationId": "putWebhooksId"
      }
    },
    "/webhooks": {
      "get": {
        "summary": "Returns a list of webhook subscription which is associated to the user",
        "description": "Returns a list of webhook subscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page.",
            "type": "integer",
            "format": "int32",
            "default": 25,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pad a number of results.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          }
        ],
        "security": [
          {
            "oauth": [
              "internal",
              "webhooks.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of webhook subscription",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Webhooks_Subscription"
            }
          },
          "403": {
            "description": "Do not have access to this action"
          },
          "400": {
            "description": "Validation error"
          }
        },
        "tags": [

        ],
        "operationId": "getWebhooks"
      },
      "post": {
        "summary": "Creates a webhook subscription which is associated to the user",
        "description": "Creates new webhook subscription",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "description": "Endpoint name",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "enabled",
            "description": "Endpoint status",
            "type": "boolean",
            "required": true
          },
          {
            "in": "formData",
            "name": "url",
            "description": "Payload URL",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "security_token",
            "description": "Secret key",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "webhook_subscription_deals[deal_id]",
            "description": "The id of the deal to link",
            "type": "array",
            "required": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "security": [
          {
            "oauth": [
              "internal",
              "webhooks.write"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Creates new webhook subscription",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Webhooks_Subscription"
            }
          },
          "403": {
            "description": "Do not have access to this action"
          },
          "400": {
            "description": "Validation error"
          }
        },
        "tags": [

        ],
        "operationId": "postWebhooks"
      }
    },
    "/ttw/reservations": {
      "post": {
        "summary": "Create a new reservation",
        "description": "Create a new reservation",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "campaign_id",
            "description": "The id of the campaign",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "email",
            "description": "The email of the user association with the reservation",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "name",
            "description": "The name of the reservation",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "phone",
            "description": "The phone of the user association with the reservation",
            "type": "string",
            "required": false
          }
        ],
        "security": [
          {
            "oauth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Create a new reservation",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Ttw_Reservation"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "reservation"
        ],
        "operationId": "createReservation",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    },
    "/ttw/campaigns/{id}": {
      "get": {
        "summary": "Gets a TTW campaign for a given company",
        "description": "Gets a TTW campaign for a given company",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "security": [
          {
            "oauth": [
              "internal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a TTW campaign for a given company",
            "schema": {
              "$ref": "#/definitions/V1_Entities_Ttw_Campaign_Response"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "campaign"
        ],
        "operationId": "getTtwCampaign",
        "x-codeSamples": [
          {
            "lang": "javascript",
            "source": ""
          },
          {
            "lang": "ruby",
            "source": ""
          }
        ]
      }
    }
  },
  "definitions": {
    "V1_Entities_Deal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The deal's unique id."
        },
        "title": {
          "type": "string",
          "description": "The deal title."
        },
        "state": {
          "type": "string",
          "enum": [
            "draft",
            "close",
            "active",
            "amending",
            "ending"
          ],
          "description": "The deal state."
        },
        "currency": {
          "type": "string",
          "description": "The primary currency associated with the deal."
        },
        "security_type": {
          "type": "string",
          "description": "The deal security type."
        },
        "price_per_security": {
          "type": "number",
          "format": "float",
          "description": "The deal price per security."
        },
        "minimum_investment": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum investment amount, in cents."
        },
        "maximum_investment": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum investment amount, in cents."
        },
        "issuer": {
          "$ref": "#/definitions/V1_Entities_DealIssuer"
        },
        "enterprise": {
          "$ref": "#/definitions/V1_Entities_DealEnterprise"
        },
        "deal_type": {
          "type": "string",
          "enum": [
            "other_or_unknown",
            "dm_plus",
            "dm_basic",
            "mini_deal",
            "reg_cf",
            "reg_a",
            "warrants",
            "offering_memorandum",
            "reg_d_506_c",
            "reg_d_506_b",
            "reg_s"
          ],
          "description": "The deal type."
        },
        "investors": {
          "$ref": "#/definitions/V1_Entities_DealInvestorMetrics"
        },
        "funding": {
          "$ref": "#/definitions/V1_Entities_DealFundingMetrics"
        }
      },
      "description": "V1_Entities_Deal model"
    },
    "V1_Entities_DealIssuer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The issuer's unique id."
        },
        "name": {
          "type": "string",
          "description": "The issuer name."
        },
        "logo": {
          "type": "string",
          "description": "The issuer's logo."
        }
      }
    },
    "V1_Entities_DealEnterprise": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The enterprise id."
        },
        "name": {
          "type": "string",
          "description": "The enterprise name."
        }
      }
    },
    "V1_Entities_DealInvestorMetrics": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of investors."
        },
        "draft": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of investors in the draft state."
        },
        "invited": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of investors in the invited state."
        },
        "signed": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of investors in the signed state."
        },
        "waiting": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of investors in the waiting state."
        },
        "accepted": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of investors in the accepted state."
        }
      }
    },
    "V1_Entities_DealFundingMetrics": {
      "type": "object",
      "properties": {
        "amount_subscribed": {
          "type": "number",
          "format": "float",
          "description": "The amount subscribed. <br><br>This value is obtained by taking the sum of the investment amount from committed investors. Committed investors are investors with a status of `signed``, `waiting`, or `accepted`."
        },
        "funds_received": {
          "type": "number",
          "format": "float",
          "description": "The amount received."
        },
        "funds_pending": {
          "type": "number",
          "format": "float",
          "description": "The amount pending."
        },
        "securities_subscribed": {
          "type": "integer",
          "format": "int32",
          "description": "The number of securities that have been subscribed. <br><br>This value is obtained by taking the sum of the total number of securities from committed investors. Committed investors are investors with a status of `signed`, `waiting`, or `accepted`."
        },
        "amount_allocated": {
          "type": "number",
          "format": "float",
          "description": "The amount allocated. <br><br>This value is obtained by taking the sum of the total allocated investment amount for investors with a status of `invited`. Allocated investment amounts are locked in and cannot be changed by the investor."
        },
        "securities_allocated": {
          "type": "integer",
          "format": "int32",
          "description": "The number of securities that have been allocated. <br><br>This value is obtained by taking the sum of the total allocated number of securities for investors with a status of `invited`. Allocated securities are locked in and cannot be changed by the investor."
        },
        "amount_accepted": {
          "type": "number",
          "format": "float",
          "description": "The amount accepted. <br><br>This value is obtained by taking the sum of the investment amount from investors with the status `accepted`."
        },
        "securities_accepted": {
          "type": "integer",
          "format": "int32",
          "description": "The number of securities that have been accepted. <br><br>This value is obtained by dividing the amount_accepted value by the price per security."
        }
      }
    },
    "V1_Entities_Investor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Investor id."
        },
        "user": {
          "$ref": "#/definitions/V1_Entities_InvestorUser",
          "description": "The user associated with this investor."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The creation time."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The last update time."
        },
        "name": {
          "type": "string",
          "description": "The full name of the investor."
        },
        "allocation_unit": {
          "type": "string",
          "enum": [
            "securities",
            "amount"
          ],
          "description": "The allocation unit."
        },
        "state": {
          "type": "string",
          "enum": [
            "draft",
            "invited",
            "cosigning",
            "signed",
            "waiting",
            "accepted",
            "inactive",
            "processing_countersign"
          ],
          "description": "The state."
        },
        "funding_state": {
          "type": "string",
          "enum": [
            "unfunded",
            "underfunded",
            "funded",
            "overfunded"
          ],
          "description": "The funding state."
        },
        "funds_pending": {
          "type": "boolean",
          "description": "True if any funds are pending; false otherwise."
        },
        "beneficial_address": {
          "type": "string",
          "description": "The address."
        },
        "phone_number": {
          "type": "string",
          "description": "The beneficial phone number associated with the investor. If there is no phone number, this returns the phone number associated with the user profile."
        },
        "tags": {
          "type": "Array[String]",
          "description": "An array of associated tags."
        },
        "investor_currency": {
          "type": "string",
          "description": "The investor currency."
        },
        "number_of_securities": {
          "type": "integer",
          "format": "int32",
          "description": "The number of securities."
        },
        "investment_value": {
          "type": "number",
          "format": "float",
          "description": "The current investment value."
        },
        "allocated_amount": {
          "type": "number",
          "format": "float",
          "description": "The amount allocated."
        },
        "funds_value": {
          "type": "number",
          "format": "float",
          "description": "The current amount that has been funded."
        },
        "access_link": {
          "type": "string",
          "description": "The access link for the investor. This is the access link for the specific investment, not the user. If the same user has multiple investments, each one will have a different access link. Please note that this access link expires every hour. In order to redirect the investor into their authentication screen, use the https://app.dealmaker.tech/deals/{{deal_id}}/investors/{{investor_id}}/otp_access url."
        },
        "subscription_id": {
          "type": "integer",
          "format": "int32",
          "description": "The investor subscription id."
        },
        "subscription_agreement": {
          "$ref": "#/definitions/V1_Entities_SubscriptionAgreement",
          "description": "The subscription agreement."
        },
        "attachments": {
          "$ref": "#/definitions/V1_Entities_Attachment",
          "description": "An array of the attachments for the investor."
        },
        "background_check_tags": {
          "type": "Array[String]",
          "enum": [
            "flagged",
            "document_upload_pending",
            "document_review_pending",
            "approved",
            "pending"
          ],
          "description": "An array of background check tags"
        },
        "background_check_searches": {
          "$ref": "#/definitions/V1_Entities_BackgroundCheckSearch"
        },
        "verification_status": {
          "type": "string",
          "enum": [
            "pending",
            "approved",
            "rejected",
            "new_documents_requested"
          ],
          "description": "The current 506c verification state."
        },
        "warrant_expiry_date": {
          "type": "string",
          "format": "date",
          "description": "The warrant expiry date."
        },
        "warrant_certificate_number": {
          "type": "integer",
          "format": "int32",
          "description": "The warrant certificate number."
        },
        "ranking_score": {
          "type": "number",
          "format": "float",
          "description": "A value `[0, 1]` that represents the propensity for the investor to complete payment for the investment. A larger value indicates a higher likelihood of payment, as predicted by DealMaker’s machine learning algorithm. This field will only populate if DealMaker Compass is enabled for a deal and the investor `funds_state` value is not `funded` or `overfunded`"
        },
        "investor_profile": {
          "type": "string"
        },
        "investor_profile_id": {
          "type": "integer",
          "format": "int32",
          "description": "The investor profile id."
        },
        "checkout_state": {
          "type": "string",
          "enum": [
            "pre_checkout",
            "investment_amount",
            "contact_information",
            "investor_confirmation",
            "terms_conditions",
            "payment",
            "checkout_complete",
            "resubmit_agreement",
            "legacy_checkout",
            "document_upload"
          ],
          "description": "Current state on the checkout page."
        },
        "legacy_flow_link": {
          "type": "string",
          "description": "The legacy link for the investor. If the investor is already on the legacy flow, this link will be null."
        }
      },
      "description": "V1_Entities_Investor model"
    },
    "V1_Entities_InvestorUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Investor user id."
        },
        "email": {
          "type": "string",
          "description": "Investor user email address."
        }
      }
    },
    "V1_Entities_SubscriptionAgreement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The subscription agreement id."
        },
        "url": {
          "type": "string",
          "description": "The subscription agreement url."
        }
      }
    },
    "V1_Entities_Attachment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The attachment id."
        },
        "url": {
          "type": "string",
          "description": "The attachment url."
        },
        "status": {
          "type": "string",
          "description": "The attachment status."
        },
        "file_name": {
          "type": "string",
          "description": "The attachment file name."
        },
        "original_file_name": {
          "type": "string",
          "description": "The attachment original file name."
        },
        "file_size": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the file in bytes."
        },
        "formatted_file_size": {
          "type": "string",
          "description": "The size of the file in human readable format."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "String representation of the date uploaded."
        }
      }
    },
    "V1_Entities_BackgroundCheckSearch": {
      "type": "object",
      "properties": {
        "external_id": {
          "type": "string",
          "description": "The background check search id."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The search entity id."
        },
        "status": {
          "type": "string",
          "description": "The per-entity result."
        }
      }
    },
    "V1_Entities_Investors": {
      "type": "object",
      "properties": {
        "items": {
          "$ref": "#/definitions/V1_Entities_Investor"
        }
      },
      "description": "V1_Entities_Investors model"
    },
    "V1_Entities_InvestorProfile_Individual": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Investor Profile id"
        },
        "user_id": {
          "type": "integer",
          "format": "int32",
          "description": "User id"
        },
        "email": {
          "type": "string",
          "description": "User email"
        },
        "type": {
          "type": "string",
          "enum": [
            "individual",
            "joint",
            "corporation",
            "trust",
            "managed"
          ],
          "description": "Investor Profile type"
        },
        "us_accredited_category": {
          "type": "string",
          "description": "The United States accredited investor information"
        },
        "ca_accredited_investor": {
          "type": "string",
          "description": "The Canadian accredited investor information"
        },
        "complete": {
          "type": "boolean",
          "description": "To check if the profile is complete or not"
        },
        "owner_type": {
          "type": "string",
          "description": "Type of the investor profile owner"
        },
        "owner": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Owner"
        },
        "account_holder": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Fields_PrimaryHolder"
        }
      }
    },
    "V1_Entities_InvestorProfile_Owner": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the owner"
        },
        "name": {
          "type": "string",
          "description": "Name of the owner"
        },
        "logo": {
          "type": "string",
          "description": "Logo of the owner"
        }
      }
    },
    "V1_Entities_InvestorProfile_Fields_PrimaryHolder": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "Investor profile first name"
        },
        "last_name": {
          "type": "string",
          "description": "Investor profile last name"
        },
        "suffix": {
          "type": "string",
          "description": "Investor profile suffix"
        },
        "date_of_birth": {
          "type": "string",
          "description": "The date of birth"
        },
        "taxpayer_id": {
          "type": "string",
          "description": "The taxpayer identification number"
        },
        "phone_number": {
          "type": "string",
          "description": "The phone number of the primary account holder"
        },
        "income": {
          "type": "number",
          "format": "float",
          "description": "The income"
        },
        "net_worth": {
          "type": "number",
          "format": "float",
          "description": "The net worth"
        },
        "reg_cf_prior_offerings_amount": {
          "type": "number",
          "format": "float",
          "description": "The prior offering amount in the last 12 months"
        },
        "address": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Address"
        }
      }
    },
    "V1_Entities_InvestorProfile_Address": {
      "type": "object",
      "properties": {
        "street_address": {
          "type": "string",
          "description": "Investor profile street address"
        },
        "unit2": {
          "type": "string",
          "description": "Investor profile street address line 2"
        },
        "city": {
          "type": "string",
          "description": "Investor profile city"
        },
        "region": {
          "type": "string",
          "description": "Investor profile region or state"
        },
        "country": {
          "type": "string",
          "description": "Investor profile country"
        },
        "postal_code": {
          "type": "string",
          "description": "Investor profile postal code or zipcode"
        }
      }
    },
    "V1_Entities_InvestorProfile_Joint": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Investor Profile id"
        },
        "user_id": {
          "type": "integer",
          "format": "int32",
          "description": "User id"
        },
        "email": {
          "type": "string",
          "description": "User email"
        },
        "type": {
          "type": "string",
          "enum": [
            "individual",
            "joint",
            "corporation",
            "trust",
            "managed"
          ],
          "description": "Investor Profile type"
        },
        "us_accredited_category": {
          "type": "string",
          "description": "The United States accredited investor information"
        },
        "ca_accredited_investor": {
          "type": "string",
          "description": "The Canadian accredited investor information"
        },
        "complete": {
          "type": "boolean",
          "description": "To check if the profile is complete or not"
        },
        "owner_type": {
          "type": "string",
          "description": "Type of the investor profile owner"
        },
        "owner": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Owner"
        },
        "joint_type": {
          "type": "string",
          "description": "The kind of joint investor"
        },
        "primary_holder": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Fields_PrimaryHolder"
        },
        "joint_holder": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Fields_AccountHolder"
        }
      }
    },
    "V1_Entities_InvestorProfile_Fields_AccountHolder": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "Investor profile first name"
        },
        "last_name": {
          "type": "string",
          "description": "Investor profile last name"
        },
        "suffix": {
          "type": "string",
          "description": "Investor profile suffix"
        },
        "date_of_birth": {
          "type": "string",
          "description": "The date of birth"
        },
        "taxpayer_id": {
          "type": "string",
          "description": "The taxpayer identification number"
        },
        "address": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Address"
        }
      }
    },
    "V1_Entities_InvestorProfile_Corporation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Investor Profile id"
        },
        "user_id": {
          "type": "integer",
          "format": "int32",
          "description": "User id"
        },
        "email": {
          "type": "string",
          "description": "User email"
        },
        "type": {
          "type": "string",
          "enum": [
            "individual",
            "joint",
            "corporation",
            "trust",
            "managed"
          ],
          "description": "Investor Profile type"
        },
        "us_accredited_category": {
          "type": "string",
          "description": "The United States accredited investor information"
        },
        "ca_accredited_investor": {
          "type": "string",
          "description": "The Canadian accredited investor information"
        },
        "complete": {
          "type": "boolean",
          "description": "To check if the profile is complete or not"
        },
        "owner_type": {
          "type": "string",
          "description": "Type of the investor profile owner"
        },
        "owner": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Owner"
        },
        "corporation": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Fields_Corporation"
        },
        "signing_officer": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Fields_SigningOfficer"
        },
        "beneficial_owners": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Fields_BeneficialOwner"
        }
      }
    },
    "V1_Entities_InvestorProfile_Fields_Corporation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The corporation name"
        },
        "business_number": {
          "type": "string",
          "description": "The corporation business number"
        },
        "phone_number": {
          "type": "string",
          "description": "The corporation phone number"
        },
        "income": {
          "type": "number",
          "format": "float",
          "description": "The income"
        },
        "net_worth": {
          "type": "number",
          "format": "float",
          "description": "The net worth"
        },
        "reg_cf_prior_offerings_amount": {
          "type": "number",
          "format": "float",
          "description": "The prior offering amount in the last 12 months"
        },
        "address": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Address"
        }
      }
    },
    "V1_Entities_InvestorProfile_Fields_SigningOfficer": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "Investor profile first name"
        },
        "last_name": {
          "type": "string",
          "description": "Investor profile last name"
        },
        "suffix": {
          "type": "string",
          "description": "Investor profile suffix"
        },
        "date_of_birth": {
          "type": "string",
          "description": "The date of birth"
        },
        "taxpayer_id": {
          "type": "string",
          "description": "The taxpayer identification number"
        },
        "address": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Address"
        },
        "title": {
          "type": "string",
          "description": "Signing officer title"
        },
        "phone_number": {
          "type": "string",
          "description": "Signing officer phone number"
        }
      }
    },
    "V1_Entities_InvestorProfile_Fields_BeneficialOwner": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "Investor profile first name"
        },
        "last_name": {
          "type": "string",
          "description": "Investor profile last name"
        },
        "suffix": {
          "type": "string",
          "description": "Investor profile suffix"
        },
        "date_of_birth": {
          "type": "string",
          "description": "The date of birth"
        },
        "taxpayer_id": {
          "type": "string",
          "description": "The taxpayer identification number"
        },
        "address": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Address"
        },
        "phone_number": {
          "type": "string",
          "description": "Beneficial owner phone number"
        }
      }
    },
    "V1_Entities_InvestorProfile_Trust": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Investor Profile id"
        },
        "user_id": {
          "type": "integer",
          "format": "int32",
          "description": "User id"
        },
        "email": {
          "type": "string",
          "description": "User email"
        },
        "type": {
          "type": "string",
          "enum": [
            "individual",
            "joint",
            "corporation",
            "trust",
            "managed"
          ],
          "description": "Investor Profile type"
        },
        "us_accredited_category": {
          "type": "string",
          "description": "The United States accredited investor information"
        },
        "ca_accredited_investor": {
          "type": "string",
          "description": "The Canadian accredited investor information"
        },
        "complete": {
          "type": "boolean",
          "description": "To check if the profile is complete or not"
        },
        "owner_type": {
          "type": "string",
          "description": "Type of the investor profile owner"
        },
        "owner": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Owner"
        },
        "trust_holder": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Fields_Trust"
        },
        "trustees": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Fields_Trustee"
        }
      }
    },
    "V1_Entities_InvestorProfile_Fields_Trust": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the trust"
        },
        "date": {
          "type": "string",
          "description": "The creation date of the trust"
        },
        "phone_number": {
          "type": "string",
          "description": "The phone number of the trust"
        },
        "income": {
          "type": "number",
          "format": "float",
          "description": "The income"
        },
        "net_worth": {
          "type": "number",
          "format": "float",
          "description": "The net worth"
        },
        "reg_cf_prior_offerings_amount": {
          "type": "number",
          "format": "float",
          "description": "The prior offering amount in the last 12 months"
        },
        "address": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Address"
        }
      }
    },
    "V1_Entities_InvestorProfile_Fields_Trustee": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "Investor profile first name"
        },
        "last_name": {
          "type": "string",
          "description": "Investor profile last name"
        },
        "suffix": {
          "type": "string",
          "description": "Investor profile suffix"
        },
        "date_of_birth": {
          "type": "string",
          "description": "The date of birth"
        },
        "taxpayer_id": {
          "type": "string",
          "description": "The taxpayer identification number"
        },
        "address": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Address"
        },
        "phone_number": {
          "type": "string",
          "description": "Trustee phone number"
        }
      }
    },
    "V1_Entities_Company": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique id."
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "The entity company."
        },
        "name": {
          "type": "string",
          "description": "The name of the company."
        },
        "description": {
          "type": "string",
          "description": "The description of the company."
        },
        "reply_email": {
          "type": "string",
          "description": "The reply email of the company."
        },
        "company_url": {
          "type": "string",
          "description": "The url of the company."
        },
        "addresses": {
          "$ref": "#/definitions/V1_Entities_Addresses"
        },
        "portals": {
          "$ref": "#/definitions/V1_Entities_CompanyDeals"
        },
        "primary_color": {
          "type": "string",
          "description": "The primary color of the company. This should be a hex color code, with the leading \"#\"."
        }
      },
      "description": "V1_Entities_Company model"
    },
    "V1_Entities_Addresses": {
      "type": "object",
      "properties": {
        "items": {
          "$ref": "#/definitions/V1_Entities_Address"
        }
      }
    },
    "V1_Entities_Address": {
      "type": "object",
      "properties": {
        "street": {
          "type": "string",
          "description": "The street."
        },
        "line_2": {
          "type": "string",
          "description": "The second line."
        },
        "city": {
          "type": "string",
          "description": "The city."
        },
        "state": {
          "type": "string",
          "description": "The state/province."
        },
        "postal_code": {
          "type": "string",
          "description": "The postal code/zip code."
        },
        "country": {
          "type": "string",
          "description": "The country."
        }
      }
    },
    "V1_Entities_CompanyDeals": {
      "type": "object",
      "properties": {
        "items": {
          "$ref": "#/definitions/V1_Entities_CompanyDeal"
        }
      }
    },
    "V1_Entities_CompanyDeal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The deal's unique id."
        },
        "name": {
          "type": "string",
          "description": "The deal title."
        }
      }
    },
    "V1_Entities_Country": {
      "type": "object",
      "properties": {
        "country": {
          "type": "string",
          "description": "The name of the country."
        },
        "country_code": {
          "type": "string",
          "description": "The country code."
        },
        "states": {
          "$ref": "#/definitions/V1_Entities_State"
        }
      }
    },
    "V1_Entities_State": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the state."
        },
        "code": {
          "type": "string",
          "description": "The state code."
        }
      }
    },
    "V1_Entities_InvestorProfiles": {
      "type": "object",
      "properties": {
        "items": {
          "$ref": "#/definitions/V1_Entities_InvestorProfileItem"
        }
      },
      "description": "V1_Entities_InvestorProfiles model"
    },
    "V1_Entities_InvestorProfileItem": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Managed"
        }
      },
      "description": "V1_Entities_InvestorProfileItem model"
    },
    "V1_Entities_InvestorProfile_Managed": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Investor Profile id"
        },
        "user_id": {
          "type": "integer",
          "format": "int32",
          "description": "User id"
        },
        "email": {
          "type": "string",
          "description": "User email"
        },
        "type": {
          "type": "string",
          "enum": [
            "individual",
            "joint",
            "corporation",
            "trust",
            "managed"
          ],
          "description": "Investor Profile type"
        },
        "us_accredited_category": {
          "type": "string",
          "description": "The United States accredited investor information"
        },
        "ca_accredited_investor": {
          "type": "string",
          "description": "The Canadian accredited investor information"
        },
        "complete": {
          "type": "boolean",
          "description": "To check if the profile is complete or not"
        },
        "owner_type": {
          "type": "string",
          "description": "Type of the investor profile owner"
        },
        "owner": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Owner"
        },
        "provider": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Fields_Provider"
        },
        "beneficiary": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Fields_Beneficiary"
        }
      }
    },
    "V1_Entities_InvestorProfile_Fields_Provider": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The provider name"
        },
        "email": {
          "type": "string",
          "description": "The provider email"
        },
        "taxpayer_id": {
          "type": "string",
          "description": "The taxpayer identification number"
        },
        "confirmation": {
          "type": "boolean",
          "description": "Confirms that the provider is able to custody these securities and release respective funds in order to complete the purchase"
        },
        "income": {
          "type": "number",
          "format": "float",
          "description": "The income"
        },
        "net_worth": {
          "type": "number",
          "format": "float",
          "description": "The net worth"
        },
        "reg_cf_prior_offerings_amount": {
          "type": "number",
          "format": "float",
          "description": "The prior offering amount in the last 12 months"
        },
        "address": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Address"
        }
      }
    },
    "V1_Entities_InvestorProfile_Fields_Beneficiary": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "Investor profile first name"
        },
        "last_name": {
          "type": "string",
          "description": "Investor profile last name"
        },
        "suffix": {
          "type": "string",
          "description": "Investor profile suffix"
        },
        "date_of_birth": {
          "type": "string",
          "description": "The date of birth"
        },
        "taxpayer_id": {
          "type": "string",
          "description": "The taxpayer identification number"
        },
        "address": {
          "$ref": "#/definitions/V1_Entities_InvestorProfile_Address"
        },
        "account_number": {
          "type": "string",
          "description": "Beneficiary account number"
        },
        "phone_number": {
          "type": "string",
          "description": "Beneficiary phone number"
        }
      }
    },
    "postInvestorProfilesCorporations": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "User email which is associated with investor profile (required)."
        },
        "us_accredited_category": {
          "type": "string",
          "description": "The United States accredited investor information.",
          "enum": [
            "entity_owned_by_accredited_investors",
            "assets_other",
            "assets_family_office",
            "assets_benefit_plan",
            "assets_state_plan",
            "assets_501_c_3",
            "assets_corporation",
            "broker_or_dealer",
            "bank_3_a_2",
            "business_development_company",
            "small_business",
            "private_business_development_company",
            "investment_company",
            "rural_business_investment_company",
            "insurance_company",
            "family_client",
            "not_accredited"
          ]
        },
        "ca_accredited_investor": {
          "type": "string",
          "description": "The Canadian accredited investor information.",
          "enum": [
            "a",
            "b",
            "c",
            "d",
            "f",
            "g",
            "h",
            "i",
            "m",
            "n",
            "o",
            "p",
            "q",
            "r",
            "s",
            "t",
            "u",
            "v",
            "x"
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of the corporation (required)."
        },
        "country": {
          "type": "Country",
          "description": "The country of the corporation (required)."
        },
        "street_address": {
          "type": "string",
          "description": "The street address of the corporation (required)."
        },
        "unit2": {
          "type": "string",
          "description": "The street address line 2 of the corporation."
        },
        "city": {
          "type": "string",
          "description": "The city of the corporation (required)."
        },
        "region": {
          "type": "string",
          "description": "The region or state of the corporation (required)."
        },
        "postal_code": {
          "type": "string",
          "description": "The postal code or zipcode of the corporation (required)."
        },
        "business_number": {
          "type": "string",
          "description": "The taxpayer identification number  of the corporation (required)."
        },
        "phone_number": {
          "type": "string",
          "description": "The phone number o of the corporation (required)."
        },
        "income": {
          "type": "number",
          "format": "float",
          "description": "The income of the individual investor profile"
        },
        "net_worth": {
          "type": "number",
          "format": "float",
          "description": "The net worth of the individual investor profile"
        },
        "reg_cf_prior_offerings_amount": {
          "type": "number",
          "format": "float",
          "description": "The prior offering amount of the individual investor profile"
        },
        "signing_officer_first_name": {
          "type": "string",
          "description": "The first name of the signing officer (required)."
        },
        "signing_officer_last_name": {
          "type": "string",
          "description": "The last name of the signing officer (required)."
        },
        "signing_officer_title": {
          "type": "string",
          "description": "The title of the signing officer."
        },
        "signing_officer_suffix": {
          "type": "string",
          "description": "The suffix of the signing officer."
        },
        "signing_officer_country": {
          "type": "Country",
          "description": "The country of the signing officer (required)."
        },
        "signing_officer_street_address": {
          "type": "string",
          "description": "The street address of the signing officer (required)."
        },
        "signing_officer_unit2": {
          "type": "string",
          "description": "The street address line 2 of the signing officer."
        },
        "signing_officer_city": {
          "type": "string",
          "description": "The city of the signing officer (required)."
        },
        "signing_officer_region": {
          "type": "string",
          "description": "The region or state of the signing officer (required)."
        },
        "signing_officer_postal_code": {
          "type": "string",
          "description": "The postal code or zipcode of the signing officer (required)."
        },
        "signing_officer_date_of_birth": {
          "type": "string",
          "description": "The date of birth of the signing officer (required)."
        },
        "signing_officer_taxpayer_id": {
          "type": "string",
          "description": "The taxpayer identification number of the signing officer (required)."
        },
        "signing_officer_phone_number": {
          "type": "string",
          "description": "The phone number of the signing officer (required)."
        },
        "beneficial_owners": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "first_name": {
                "type": "string",
                "description": "The list of first names for the beneficial owners (required for beneficial owner 1)."
              },
              "last_name": {
                "type": "string",
                "description": "The list of last names for the beneficial owners (required for beneficial owner 1)."
              },
              "suffix": {
                "type": "string",
                "description": "The list of suffixes for the beneficial owners."
              },
              "country": {
                "type": "Country",
                "description": "The list of countries for the beneficial owners (required for beneficial owner 1)."
              },
              "street_address": {
                "type": "string",
                "description": "The list of street addresses for the beneficial owners (required for beneficial owner 1)."
              },
              "unit2": {
                "type": "string",
                "description": "The list of street address line 2 for the beneficial owners."
              },
              "city": {
                "type": "string",
                "description": "The list of cities for the beneficial owners (required for beneficial owner 1)."
              },
              "region": {
                "type": "string",
                "description": "The list of region or states for the beneficial owners (required for beneficial owner 1)."
              },
              "postal_code": {
                "type": "string",
                "description": "The list of postal codes or zipcodes for the beneficial owners (required for beneficial owner 1)."
              },
              "date_of_birth": {
                "type": "string",
                "description": "The list of dates of birth for the beneficial owners (required for beneficial owner 1)."
              },
              "taxpayer_id": {
                "type": "string",
                "description": "The list of taxpayer identification numbers for the beneficial owners (required for beneficial owner 1)."
              },
              "phone_number": {
                "type": "string",
                "description": "The list of phone numbers for the beneficial owners (required for beneficial owner 1)."
              }
            }
          }
        }
      },
      "required": [
        "email"
      ],
      "description": "Create new corporation investor profile."
    },
    "V1_Entities_InvestorProfile_Id": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Investor Profile id"
        }
      },
      "description": "V1_Entities_InvestorProfile_Id model"
    },
    "patchInvestorProfilesCorporations": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "The email associated with the profile to be updated."
        },
        "us_accredited_category": {
          "type": "string",
          "description": "The United States accredited investor information.",
          "enum": [
            "entity_owned_by_accredited_investors",
            "assets_other",
            "assets_family_office",
            "assets_benefit_plan",
            "assets_state_plan",
            "assets_501_c_3",
            "assets_corporation",
            "broker_or_dealer",
            "bank_3_a_2",
            "business_development_company",
            "small_business",
            "private_business_development_company",
            "investment_company",
            "rural_business_investment_company",
            "insurance_company",
            "family_client",
            "not_accredited"
          ]
        },
        "ca_accredited_investor": {
          "type": "string",
          "description": "The Canadian accredited investor information.",
          "enum": [
            "a",
            "b",
            "c",
            "d",
            "f",
            "g",
            "h",
            "i",
            "m",
            "n",
            "o",
            "p",
            "q",
            "r",
            "s",
            "t",
            "u",
            "v",
            "x"
          ]
        },
        "name": {
          "type": "string",
          "description": "Corporation name."
        },
        "country": {
          "type": "Country",
          "description": "Corporation country."
        },
        "street_address": {
          "type": "string",
          "description": "Corporation street address."
        },
        "unit2": {
          "type": "string",
          "description": "Corporation street address line 2."
        },
        "city": {
          "type": "string",
          "description": "Corporation city."
        },
        "region": {
          "type": "string",
          "description": "Corporation region or state."
        },
        "postal_code": {
          "type": "string",
          "description": "Corporation postal code or zipcode."
        },
        "business_number": {
          "type": "string",
          "description": "The business number of the investor profile."
        },
        "phone_number": {
          "type": "string",
          "description": "The phone number of the investor profile."
        },
        "income": {
          "type": "number",
          "format": "float",
          "description": "The income of the individual investor profile"
        },
        "net_worth": {
          "type": "number",
          "format": "float",
          "description": "The net worth of the individual investor profile"
        },
        "reg_cf_prior_offerings_amount": {
          "type": "number",
          "format": "float",
          "description": "The prior offering amount of the individual investor profile"
        },
        "signing_officer_first_name": {
          "type": "string",
          "description": "Signing officer first name."
        },
        "signing_officer_last_name": {
          "type": "string",
          "description": "Signing officer last name."
        },
        "signing_officer_title": {
          "type": "string",
          "description": "Signing officer title."
        },
        "signing_officer_suffix": {
          "type": "string",
          "description": "Signing officer suffix."
        },
        "signing_officer_country": {
          "type": "Country",
          "description": "Signing officer country."
        },
        "signing_officer_street_address": {
          "type": "string",
          "description": "Signing officer street address."
        },
        "signing_officer_unit2": {
          "type": "string",
          "description": "Signing officer street address line 2."
        },
        "signing_officer_city": {
          "type": "string",
          "description": "Signing officer city."
        },
        "signing_officer_region": {
          "type": "string",
          "description": "Signing officer region or state."
        },
        "signing_officer_postal_code": {
          "type": "string",
          "description": "Signing officer postal code or zipcode."
        },
        "signing_officer_date_of_birth": {
          "type": "string",
          "description": "Signing officer date of birth."
        },
        "signing_officer_taxpayer_id": {
          "type": "string",
          "description": "The taxpayer identification number of the investor profile."
        },
        "signing_officer_phone_number": {
          "type": "string",
          "description": "The phone number of the signing officer (required)."
        },
        "beneficial_owners": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "index": {
                "type": "integer",
                "format": "int32",
                "description": "The index of the beneficial owner."
              },
              "_delete": {
                "type": "boolean",
                "description": "If true, this entry will be cleared."
              },
              "first_name": {
                "type": "string",
                "description": "The list of first names for the beneficial owners (required for beneficial owner 1)."
              },
              "last_name": {
                "type": "string",
                "description": "The list of last names for the beneficial owners (required for beneficial owner 1)."
              },
              "suffix": {
                "type": "string",
                "description": "The list of suffixes for the beneficial owners."
              },
              "country": {
                "type": "Country",
                "description": "The list of countries for the beneficial owners (required for beneficial owner 1)."
              },
              "street_address": {
                "type": "string",
                "description": "The list of street addresses for the beneficial owners (required for beneficial owner 1)."
              },
              "unit2": {
                "type": "string",
                "description": "The list of street address line 2 for the beneficial owners."
              },
              "city": {
                "type": "string",
                "description": "The list of cities for the beneficial owners (required for beneficial owner 1)."
              },
              "region": {
                "type": "string",
                "description": "The list of region or states for the beneficial owners (required for beneficial owner 1)."
              },
              "postal_code": {
                "type": "string",
                "description": "The list of postal codes or zipcodes for the beneficial owners (required for beneficial owner 1)."
              },
              "date_of_birth": {
                "type": "string",
                "description": "The list of dates of birth for the beneficial owners (required for beneficial owner 1)."
              },
              "taxpayer_id": {
                "type": "string",
                "description": "The list of taxpayer identification numbers for the beneficial owners (required for beneficial owner 1)."
              },
              "phone_number": {
                "type": "string",
                "description": "The list of phone numbers for the beneficial owners (required for beneficial owner 1)."
              }
            },
            "required": [
              "index"
            ]
          }
        }
      },
      "description": "Patch corporation investor profile"
    },
    "postInvestorProfilesJoints": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "User email which is associated with investor profile."
        },
        "us_accredited_category": {
          "type": "string",
          "description": "The United States accredited investor information.",
          "enum": [
            "income_individual",
            "assets_individual",
            "director",
            "knowledgable_employee",
            "broker_or_dealer",
            "investment_advisor_registered",
            "investment_advisor_relying",
            "designated_accredited_investor",
            "not_accredited"
          ]
        },
        "ca_accredited_investor": {
          "type": "string",
          "description": "The Canadian accredited investor information.",
          "enum": [
            "d",
            "e",
            "e_1",
            "j",
            "j_1",
            "k_individual",
            "k_spouse",
            "l",
            "q",
            "v",
            "x"
          ]
        },
        "joint_type": {
          "type": "string",
          "description": "The types of joint investor.",
          "enum": [
            "joint_tenant",
            "tenants_in_common",
            "community_property"
          ]
        },
        "first_name": {
          "type": "string",
          "description": "The first name of the primary holder (required)."
        },
        "last_name": {
          "type": "string",
          "description": "The last name of the primary holder (required)."
        },
        "suffix": {
          "type": "string",
          "description": "The suffix of the primary holder."
        },
        "country": {
          "type": "Country",
          "description": "The country the primary holder (required)."
        },
        "street_address": {
          "type": "string",
          "description": "The street address of the primary holder (required)."
        },
        "unit2": {
          "type": "string",
          "description": "The street address line 2 of the primary holder."
        },
        "city": {
          "type": "string",
          "description": "The city of the primary holder (required)."
        },
        "region": {
          "type": "string",
          "description": "The region or State of the primary holder (required)."
        },
        "postal_code": {
          "type": "string",
          "description": "The postal code or zipcode of the primary holder (required)."
        },
        "date_of_birth": {
          "type": "string",
          "description": "The date of birth of the primary holder (required)."
        },
        "taxpayer_id": {
          "type": "string",
          "description": "The taxpayer identification number of the primary holder (required)."
        },
        "phone_number": {
          "type": "string",
          "description": "The phone number of the primary holder (required)."
        },
        "income": {
          "type": "number",
          "format": "float",
          "description": "The income of the primary holder."
        },
        "net_worth": {
          "type": "number",
          "format": "float",
          "description": "The net worth of the primary holder."
        },
        "reg_cf_prior_offerings_amount": {
          "type": "number",
          "format": "float",
          "description": "The prior offerings amount of the primary holder."
        },
        "joint_holder_first_name": {
          "type": "string",
          "description": "The first name of the joint holder (required)."
        },
        "joint_holder_last_name": {
          "type": "string",
          "description": "The last name of the joint holder (required)."
        },
        "joint_holder_suffix": {
          "type": "string",
          "description": "The suffix of the joint holder."
        },
        "joint_holder_country": {
          "type": "Country",
          "description": "The country of the joint holder (required)."
        },
        "joint_holder_street_address": {
          "type": "string",
          "description": "The street address of the joint holder (required)."
        },
        "joint_holder_unit2": {
          "type": "string",
          "description": "The street address line 2 of the joint holder."
        },
        "joint_holder_city": {
          "type": "string",
          "description": "The city of the joint holder (required)."
        },
        "joint_holder_region": {
          "type": "string",
          "description": "The region or state of the joint holder (required)."
        },
        "joint_holder_postal_code": {
          "type": "string",
          "description": "The postal code or zipcode of the joint holder (required)."
        },
        "joint_holder_date_of_birth": {
          "type": "string",
          "description": "The date of birth of the joint holder (required)."
        },
        "joint_holder_taxpayer_id": {
          "type": "string",
          "description": "The taxpayer identification number of the joint holder (required)."
        }
      },
      "required": [
        "email"
      ],
      "description": "Create new joint investor profile"
    },
    "patchInvestorProfilesJoints": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "The email associated with the profile to be updated."
        },
        "us_accredited_category": {
          "type": "string",
          "description": "The United States accredited investor information.",
          "enum": [
            "income_individual",
            "assets_individual",
            "director",
            "knowledgable_employee",
            "broker_or_dealer",
            "investment_advisor_registered",
            "investment_advisor_relying",
            "designated_accredited_investor",
            "not_accredited"
          ]
        },
        "ca_accredited_investor": {
          "type": "string",
          "description": "The Canadian accredited investor information.",
          "enum": [
            "d",
            "e",
            "e_1",
            "j",
            "j_1",
            "k_individual",
            "k_spouse",
            "l",
            "q",
            "v",
            "x"
          ]
        },
        "joint_type": {
          "type": "string",
          "description": "The kind of joint investor.",
          "enum": [
            "joint_tenant",
            "tenants_in_common",
            "community_property"
          ]
        },
        "first_name": {
          "type": "string",
          "description": "The first name of the investor profile."
        },
        "last_name": {
          "type": "string",
          "description": "The last name of the investor profile."
        },
        "suffix": {
          "type": "string",
          "description": "The suffix of the investor profile."
        },
        "country": {
          "type": "Country",
          "description": "The country the investor profile."
        },
        "street_address": {
          "type": "string",
          "description": "The street address of the investor profile."
        },
        "unit2": {
          "type": "string",
          "description": "The street address line 2 of the investor profile."
        },
        "city": {
          "type": "string",
          "description": "The city of the investor profile."
        },
        "region": {
          "type": "string",
          "description": "The region or State of the investor profile."
        },
        "postal_code": {
          "type": "string",
          "description": "The postal code or zipcode of the investor profile."
        },
        "date_of_birth": {
          "type": "string",
          "description": "The date of birth of the investor profile."
        },
        "taxpayer_id": {
          "type": "string",
          "description": "The taxpayer identification number of the investor profile."
        },
        "phone_number": {
          "type": "string",
          "description": "The phone number of the investor profile."
        },
        "income": {
          "type": "number",
          "format": "float",
          "description": "The income of the investor profile."
        },
        "net_worth": {
          "type": "number",
          "format": "float",
          "description": "The net worth of the investor profile."
        },
        "reg_cf_prior_offerings_amount": {
          "type": "number",
          "format": "float",
          "description": "The prior offerings amount of the investor profile."
        },
        "joint_holder_first_name": {
          "type": "string",
          "description": "The joint holder first name of the investor profile."
        },
        "joint_holder_last_name": {
          "type": "string",
          "description": "The joint holder last name of the investor profile."
        },
        "joint_holder_suffix": {
          "type": "string",
          "description": "The suffix of the individual investor profile."
        },
        "joint_holder_country": {
          "type": "Country",
          "description": "The joint holder country of the investor profile."
        },
        "joint_holder_street_address": {
          "type": "string",
          "description": "The joint holder street address of the investor profile."
        },
        "joint_holder_unit2": {
          "type": "string",
          "description": "The Joint holder street address line 2 of the investor profile."
        },
        "joint_holder_city": {
          "type": "string",
          "description": "The Joint holder city of the investor profile."
        },
        "joint_holder_region": {
          "type": "string",
          "description": "The joint holder region or state of the investor profile."
        },
        "joint_holder_postal_code": {
          "type": "string",
          "description": "The joint holder postal code or zipcode of the investor profile."
        },
        "joint_holder_date_of_birth": {
          "type": "string",
          "description": "The joint holder date of birth of the investor profile."
        },
        "joint_holder_taxpayer_id": {
          "type": "string",
          "description": "The joint holder taxpayer identification number of the investor profile."
        }
      },
      "description": "Patch joint investor profile"
    },
    "postInvestorProfilesIndividuals": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "User email which is associated with individual investor profile."
        },
        "us_accredited_category": {
          "type": "string",
          "description": "The United States accredited investor information.",
          "enum": [
            "income_individual",
            "assets_individual",
            "director",
            "knowledgable_employee",
            "broker_or_dealer",
            "investment_advisor_registered",
            "investment_advisor_relying",
            "designated_accredited_investor",
            "not_accredited"
          ]
        },
        "ca_accredited_investor": {
          "type": "string",
          "description": "The Canadian accredited investor information.",
          "enum": [
            "d",
            "e",
            "e_1",
            "j",
            "j_1",
            "k_individual",
            "k_spouse",
            "l",
            "q",
            "v",
            "x"
          ]
        },
        "first_name": {
          "type": "string",
          "description": "The first name of the individual investor profile (required)."
        },
        "last_name": {
          "type": "string",
          "description": "The last name of the individual investor profile (required)"
        },
        "suffix": {
          "type": "string",
          "description": "The suffix of the individual investor profile"
        },
        "date_of_birth": {
          "type": "string",
          "description": "The date of birth of the investor profile (required)"
        },
        "taxpayer_id": {
          "type": "string",
          "description": "The taxpayer identification number of the investor profile (required)"
        },
        "phone_number": {
          "type": "string",
          "description": "The phone number of the investor profile (required)"
        },
        "country": {
          "type": "Country",
          "description": "The country of the individual investor profile (required)"
        },
        "street_address": {
          "type": "string",
          "description": "The street address of the individual investor profile (required)"
        },
        "unit2": {
          "type": "string",
          "description": "The street address line 2 of the individual investor profile"
        },
        "city": {
          "type": "string",
          "description": "The city of the individual investor profile (required)"
        },
        "region": {
          "type": "string",
          "description": "The region or state of the individual investor profile (required)"
        },
        "postal_code": {
          "type": "string",
          "description": "The postal code or zipcode of the individual investor profile (required)"
        },
        "income": {
          "type": "number",
          "format": "float",
          "description": "The income of the individual investor profile"
        },
        "net_worth": {
          "type": "number",
          "format": "float",
          "description": "The net worth of the individual investor profile"
        },
        "reg_cf_prior_offerings_amount": {
          "type": "number",
          "format": "float",
          "description": "The prior offering amount of the individual investor profile"
        }
      },
      "required": [
        "email"
      ],
      "description": "Create new individual investor profile"
    },
    "patchInvestorProfilesIndividuals": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "The email associated with the profile to be updated."
        },
        "us_accredited_category": {
          "type": "string",
          "description": "The United States accredited investor information.",
          "enum": [
            "income_individual",
            "assets_individual",
            "director",
            "knowledgable_employee",
            "broker_or_dealer",
            "investment_advisor_registered",
            "investment_advisor_relying",
            "designated_accredited_investor",
            "not_accredited"
          ]
        },
        "ca_accredited_investor": {
          "type": "string",
          "description": "The Canadian accredited investor information.",
          "enum": [
            "d",
            "e",
            "e_1",
            "j",
            "j_1",
            "k_individual",
            "k_spouse",
            "l",
            "q",
            "v",
            "x"
          ]
        },
        "first_name": {
          "type": "string",
          "description": "The first name of the individual investor profile."
        },
        "last_name": {
          "type": "string",
          "description": "The last name of the individual investor profile."
        },
        "suffix": {
          "type": "string",
          "description": "The suffix of the individual investor profile."
        },
        "date_of_birth": {
          "type": "string",
          "description": "The date of birth of the investor profile."
        },
        "taxpayer_id": {
          "type": "string",
          "description": "The taxpayer identification number of the investor profile."
        },
        "phone_number": {
          "type": "string",
          "description": "The phone number of the investor profile."
        },
        "country": {
          "type": "Country",
          "description": "The country of the individual investor profile."
        },
        "street_address": {
          "type": "string",
          "description": "The street address of the individual investor profile."
        },
        "unit2": {
          "type": "string",
          "description": "The street address line 2 of the individual investor profile."
        },
        "city": {
          "type": "string",
          "description": "The city of the individual investor profile."
        },
        "region": {
          "type": "string",
          "description": "The region or state of the individual investor profile."
        },
        "postal_code": {
          "type": "string",
          "description": "The postal code or zipcode of the individual investor profile."
        },
        "income": {
          "type": "number",
          "format": "float",
          "description": "The income of the individual investor profile"
        },
        "net_worth": {
          "type": "number",
          "format": "float",
          "description": "The net worth of the individual investor profile"
        },
        "reg_cf_prior_offerings_amount": {
          "type": "number",
          "format": "float",
          "description": "The prior offering amount of the individual investor profile"
        }
      },
      "description": "Patch individual investor profile."
    },
    "postInvestorProfilesTrusts": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "User email which is associated with investor profile (required)."
        },
        "us_accredited_category": {
          "type": "string",
          "description": "The United States accredited investor information.",
          "enum": [
            "entity_owned_by_accredited_investors",
            "broker_or_dealer",
            "assets_trust",
            "not_accredited"
          ]
        },
        "ca_accredited_investor": {
          "type": "string",
          "description": "The Canadian accredited investor information.",
          "enum": [
            "p",
            "w"
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of the trust (required)."
        },
        "date": {
          "type": "string",
          "description": "The creation date of the trust (required)."
        },
        "country": {
          "type": "Country",
          "description": "The country of the trust (required)."
        },
        "street_address": {
          "type": "string",
          "description": "Trust street address of the trust (required)."
        },
        "unit2": {
          "type": "string",
          "description": "The street address line 2 of the trust."
        },
        "city": {
          "type": "string",
          "description": "The city of the trust (required)."
        },
        "region": {
          "type": "string",
          "description": "The region or state of the trust (required)."
        },
        "postal_code": {
          "type": "string",
          "description": "The postal code or zipcode of the trust (required)."
        },
        "phone_number": {
          "type": "string",
          "description": "The phone number of the trust (required)."
        },
        "income": {
          "type": "number",
          "format": "float",
          "description": "The income of the trust."
        },
        "net_worth": {
          "type": "number",
          "format": "float",
          "description": "The net worth of the trust."
        },
        "reg_cf_prior_offerings_amount": {
          "type": "number",
          "format": "float",
          "description": "The prior offering amount of the trust."
        },
        "trustees": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "first_name": {
                "type": "string",
                "description": "The list of first names for the trustees (required for trustee 1)."
              },
              "last_name": {
                "type": "string",
                "description": "The list of last names for the trustees (required for trustee 1)."
              },
              "suffix": {
                "type": "string",
                "description": "The list of suffixes for the trustees."
              },
              "country": {
                "type": "Country",
                "description": "The list of countries for the trustees (required for trustee 1)."
              },
              "street_address": {
                "type": "string",
                "description": "The list of street addresses for the trustees (required for trustee 1)."
              },
              "unit2": {
                "type": "string",
                "description": "The list of street address line 2 for the trustees."
              },
              "city": {
                "type": "string",
                "description": "The list of cities for the trustees (required for trustee 1)."
              },
              "region": {
                "type": "string",
                "description": "The list of regions or states for the trustees (required for trustee 1)."
              },
              "postal_code": {
                "type": "string",
                "description": "The list of postal codes or zipcodes for the trustees (required for trustee 1)."
              },
              "date_of_birth": {
                "type": "string",
                "description": "The list of dates of birth for the trustees (required for trustee 1)."
              },
              "taxpayer_id": {
                "type": "string",
                "description": "The list of taxpayer identification numbers for the trustees (required for trustee 1)."
              },
              "phone_number": {
                "type": "string",
                "description": "The list of phone numbers for the trustees (required for trustee 1)."
              }
            }
          }
        }
      },
      "required": [
        "email"
      ],
      "description": "Create new trust investor profile."
    },
    "patchInvestorProfilesTrusts": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "The email associated with the profile to be updated."
        },
        "us_accredited_category": {
          "type": "string",
          "description": "The United States accredited investor information.",
          "enum": [
            "entity_owned_by_accredited_investors",
            "broker_or_dealer",
            "assets_trust",
            "not_accredited"
          ]
        },
        "ca_accredited_investor": {
          "type": "string",
          "description": "The Canadian accredited investor information.",
          "enum": [
            "p",
            "w"
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of the trust."
        },
        "date": {
          "type": "string",
          "description": "The creation date of the trust."
        },
        "phone_number": {
          "type": "string",
          "description": "The phone number of the trust."
        },
        "country": {
          "type": "Country",
          "description": "Trust country."
        },
        "street_address": {
          "type": "string",
          "description": "Trust street address."
        },
        "unit2": {
          "type": "string",
          "description": "Trust street address line 2."
        },
        "city": {
          "type": "string",
          "description": "Trust city."
        },
        "region": {
          "type": "string",
          "description": "Trust region or state."
        },
        "postal_code": {
          "type": "string",
          "description": "Trust postal code or zipcode."
        },
        "income": {
          "type": "number",
          "format": "float",
          "description": "The income of the Trust."
        },
        "net_worth": {
          "type": "number",
          "format": "float",
          "description": "The net worth of the Trust."
        },
        "reg_cf_prior_offerings_amount": {
          "type": "number",
          "format": "float",
          "description": "The prior offering amount of the Trust."
        },
        "trustees": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "index": {
                "type": "integer",
                "format": "int32",
                "description": "The index of the trustee."
              },
              "_delete": {
                "type": "boolean",
                "description": "If true, this entry will be cleared."
              },
              "first_name": {
                "type": "string",
                "description": "The list of first names for the trustees (required for trustee 1)."
              },
              "last_name": {
                "type": "string",
                "description": "The list of last names for the trustees (required for trustee 1)."
              },
              "suffix": {
                "type": "string",
                "description": "The list of suffixes for the trustees."
              },
              "country": {
                "type": "Country",
                "description": "The list of countries for the trustees (required for trustee 1)."
              },
              "street_address": {
                "type": "string",
                "description": "The list of street addresses for the trustees (required for trustee 1)."
              },
              "unit2": {
                "type": "string",
                "description": "The list of street address line 2 for the trustees."
              },
              "city": {
                "type": "string",
                "description": "The list of cities for the trustees (required for trustee 1)."
              },
              "region": {
                "type": "string",
                "description": "The list of regions or states for the trustees (required for trustee 1)."
              },
              "postal_code": {
                "type": "string",
                "description": "The list of postal codes or zipcodes for the trustees (required for trustee 1)."
              },
              "date_of_birth": {
                "type": "string",
                "description": "The list of dates of birth for the trustees (required for trustee 1)."
              },
              "taxpayer_id": {
                "type": "string",
                "description": "The list of taxpayer identification numbers for the trustees (required for trustee 1)."
              },
              "phone_number": {
                "type": "string",
                "description": "The list of phone numbers for the trustees (required for trustee 1)."
              }
            },
            "required": [
              "index"
            ]
          }
        }
      },
      "description": "Patch trust investor profile"
    },
    "postInvestorProfilesManaged": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "User email which is associated with investor profile (required)."
        },
        "us_accredited_category": {
          "type": "string",
          "description": "The United States accredited investor information.",
          "enum": [
            "income_individual",
            "assets_individual",
            "director",
            "knowledgable_employee",
            "broker_or_dealer",
            "investment_advisor_registered",
            "investment_advisor_relying",
            "designated_accredited_investor",
            "not_accredited"
          ]
        },
        "ca_accredited_investor": {
          "type": "string",
          "description": "The Canadian accredited investor information.",
          "enum": [
            "d",
            "e",
            "e_1",
            "j",
            "j_1",
            "k_individual",
            "k_spouse",
            "l",
            "q",
            "v",
            "x"
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of the provider (required)."
        },
        "provider_email": {
          "type": "string",
          "description": "The email of the provider (required)."
        },
        "country": {
          "type": "Country",
          "description": "The country of the provider (required)."
        },
        "street_address": {
          "type": "string",
          "description": "The street address of the provider (required)."
        },
        "unit2": {
          "type": "string",
          "description": "The street address line 2 of the provider."
        },
        "city": {
          "type": "string",
          "description": "The city of the provider (required)."
        },
        "region": {
          "type": "string",
          "description": "The region or state of the provider (required)."
        },
        "postal_code": {
          "type": "string",
          "description": "The postal code or zipcode of the provider (required)."
        },
        "taxpayer_id": {
          "type": "string",
          "description": "The taxpayer identification number of the provider (required)."
        },
        "confirmation": {
          "type": "boolean",
          "description": "Confirms that the provider is able to custody these securities and release respective funds in order to complete the purchase (required)."
        },
        "income": {
          "type": "number",
          "format": "float",
          "description": "The income of the managed investor profile"
        },
        "net_worth": {
          "type": "number",
          "format": "float",
          "description": "The net worth of the managed investor profile"
        },
        "reg_cf_prior_offerings_amount": {
          "type": "number",
          "format": "float",
          "description": "The prior offering amount of the managed investor profile"
        },
        "beneficiary_account_number": {
          "type": "string",
          "description": "The account number of the beneficiary (required)."
        },
        "beneficiary_first_name": {
          "type": "string",
          "description": "The first name of the beneficiary (required)."
        },
        "beneficiary_last_name": {
          "type": "string",
          "description": "The last name of the beneficiary (required)."
        },
        "beneficiary_suffix": {
          "type": "string",
          "description": "The suffix of the beneficiary."
        },
        "beneficiary_country": {
          "type": "Country",
          "description": "The country of the beneficiary (required)."
        },
        "beneficiary_street_address": {
          "type": "string",
          "description": "The street address of the beneficiary (required)."
        },
        "beneficiary_unit2": {
          "type": "string",
          "description": "The street address line 2 of the beneficiary."
        },
        "beneficiary_city": {
          "type": "string",
          "description": "The city of the beneficiary (required)."
        },
        "beneficiary_region": {
          "type": "string",
          "description": "The region or state of the beneficiary (required)."
        },
        "beneficiary_postal_code": {
          "type": "string",
          "description": "The postal code or zipcode of the beneficiary (required)."
        },
        "beneficiary_date_of_birth": {
          "type": "string",
          "description": "The date of birth of the beneficiary (required)."
        },
        "beneficiary_taxpayer_id": {
          "type": "string",
          "description": "The taxpayer identification number of the beneficiary (required)."
        },
        "beneficiary_phone_number": {
          "type": "string",
          "description": "The phone number of the beneficiary (required)."
        }
      },
      "required": [
        "email"
      ],
      "description": "Create new managed investor profile."
    },
    "patchInvestorProfilesManaged": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "User email which is associated with investor profile (required)."
        },
        "us_accredited_category": {
          "type": "string",
          "description": "The United States accredited investor information.",
          "enum": [
            "income_individual",
            "assets_individual",
            "director",
            "knowledgable_employee",
            "broker_or_dealer",
            "investment_advisor_registered",
            "investment_advisor_relying",
            "designated_accredited_investor",
            "not_accredited"
          ]
        },
        "ca_accredited_investor": {
          "type": "string",
          "description": "The Canadian accredited investor information.",
          "enum": [
            "d",
            "e",
            "e_1",
            "j",
            "j_1",
            "k_individual",
            "k_spouse",
            "l",
            "q",
            "v",
            "x"
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of the provider."
        },
        "provider_email": {
          "type": "string",
          "description": "The email of the provider."
        },
        "country": {
          "type": "Country",
          "description": "The country of the provider."
        },
        "street_address": {
          "type": "string",
          "description": "The street address of the provider."
        },
        "unit2": {
          "type": "string",
          "description": "The street address line 2 of the provider."
        },
        "city": {
          "type": "string",
          "description": "The city of the provider."
        },
        "region": {
          "type": "string",
          "description": "The region or state of the provider."
        },
        "postal_code": {
          "type": "string",
          "description": "The postal code or zipcode of the provider."
        },
        "taxpayer_id": {
          "type": "string",
          "description": "The taxpayer identification number of the provider."
        },
        "confirmation": {
          "type": "boolean",
          "description": "Confirms that the provider is able to custody these securities and release respective funds in order to complete the purchase."
        },
        "income": {
          "type": "number",
          "format": "float",
          "description": "The income of the managed investor profile."
        },
        "net_worth": {
          "type": "number",
          "format": "float",
          "description": "The net worth of the managed investor profile"
        },
        "reg_cf_prior_offerings_amount": {
          "type": "number",
          "format": "float",
          "description": "The prior offering amount of the managed investor profile."
        },
        "beneficiary_account_number": {
          "type": "string",
          "description": "The account number of the beneficiary."
        },
        "beneficiary_first_name": {
          "type": "string",
          "description": "The first name of the beneficiary."
        },
        "beneficiary_last_name": {
          "type": "string",
          "description": "The last name of the beneficiary."
        },
        "beneficiary_suffix": {
          "type": "string",
          "description": "The suffix of the beneficiary."
        },
        "beneficiary_country": {
          "type": "Country",
          "description": "The country of the beneficiary."
        },
        "beneficiary_street_address": {
          "type": "string",
          "description": "The street address of the beneficiary."
        },
        "beneficiary_unit2": {
          "type": "string",
          "description": "The street address line 2 of the beneficiary."
        },
        "beneficiary_city": {
          "type": "string",
          "description": "The city of the beneficiary."
        },
        "beneficiary_region": {
          "type": "string",
          "description": "The region or state of the beneficiary."
        },
        "beneficiary_postal_code": {
          "type": "string",
          "description": "The postal code or zipcode of the beneficiary."
        },
        "beneficiary_date_of_birth": {
          "type": "string",
          "description": "The date of birth of the beneficiary."
        },
        "beneficiary_taxpayer_id": {
          "type": "string",
          "description": "The taxpayer identification number of the beneficiary."
        },
        "beneficiary_phone_number": {
          "type": "string",
          "description": "The phone number of the beneficiary."
        }
      },
      "required": [
        "email"
      ],
      "description": "Patch managed investor profile."
    },
    "V1_Entities_PresignedUrlResult": {
      "type": "object",
      "properties": {
        "file_key": {
          "type": "string",
          "description": "The file UUID generated value."
        },
        "presigned_url": {
          "type": "string",
          "description": "A pre-signed url by aws for interacting with a S3 bucket."
        }
      },
      "description": "V1_Entities_PresignedUrlResult model"
    },
    "V1_Entities_DeleteResult": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "The status of the request."
        },
        "message": {
          "type": "string",
          "description": "The message of the request."
        }
      },
      "description": "V1_Entities_DeleteResult model"
    },
    "V1_Entities_Users_VerificationResources": {
      "type": "object",
      "properties": {
        "totpEnabled": {
          "type": "boolean",
          "description": "Check if on the authenticator app is set for the user."
        },
        "smsEnabled": {
          "type": "boolean",
          "description": "Check if on the sms verification is set for the user."
        },
        "phone": {
          "type": "string",
          "description": "The last 4 digits of the users phone number."
        }
      },
      "description": "V1_Entities_Users_VerificationResources model"
    },
    "V1_Entities_Users_TwoFactorChannel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The id for the two factor channel."
        },
        "factorSid": {
          "type": "string",
          "description": "The unique string for the resource"
        },
        "userId": {
          "type": "integer",
          "format": "int32",
          "description": "The user id for the two factor channel."
        },
        "identity": {
          "type": "string",
          "description": "The identity for the two factor channel."
        },
        "phoneNumber": {
          "type": "string",
          "description": "The phone number for the two factor channel."
        },
        "channel": {
          "type": "string",
          "description": "The channel for the two factor channel."
        },
        "verified": {
          "type": "boolean",
          "description": "The verification status for the two factor channel."
        },
        "updatedAt": {
          "type": "string",
          "description": "The time since the two factor channel was last updated/verified."
        }
      },
      "description": "V1_Entities_Users_TwoFactorChannel model"
    },
    "V1_Entities_Users_Factor": {
      "type": "object",
      "properties": {
        "sid": {
          "type": "string",
          "description": "The sid for the factor."
        },
        "identity": {
          "type": "string",
          "description": "The identity of the factor."
        },
        "binding": {
          "$ref": "#/definitions/V1_Entities_Users_Binding",
          "description": "The binding of the factor."
        }
      },
      "description": "V1_Entities_Users_Factor model"
    },
    "V1_Entities_Users_Binding": {
      "type": "object",
      "properties": {
        "secret": {
          "type": "string",
          "description": "The secret."
        },
        "uri": {
          "type": "string",
          "description": "The URI."
        }
      }
    },
    "V1_Entities_Users_TwoFactorChannels": {
      "type": "object",
      "properties": {
        "items": {
          "$ref": "#/definitions/V1_Entities_Users_TwoFactorChannel"
        }
      },
      "description": "V1_Entities_Users_TwoFactorChannels model"
    },
    "V1_Entities_User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The user id."
        },
        "full_name": {
          "type": "string",
          "description": "The full user name."
        },
        "email": {
          "type": "string",
          "description": "The email."
        }
      },
      "description": "V1_Entities_User model"
    },
    "V1_Entities_Users_Contexts": {
      "type": "object",
      "properties": {
        "contexts": {
          "$ref": "#/definitions/V1_Entities_Users_Context",
          "description": "An array of contexts for the user."
        }
      },
      "description": "V1_Entities_Users_Contexts model"
    },
    "V1_Entities_Users_Context": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Context ID."
        },
        "name": {
          "type": "string",
          "description": "The name of the context."
        },
        "logo": {
          "type": "string",
          "description": "The logo of the context."
        },
        "type": {
          "type": "string",
          "description": "The type of the context."
        }
      }
    },
    "V1_Entities_Countries": {
      "type": "object",
      "properties": {
        "items": {
          "$ref": "#/definitions/V1_Entities_Country"
        }
      },
      "description": "V1_Entities_Countries model"
    },
    "putDealsIdInvestors": {
      "type": "object",
      "properties": {
        "warrant_expiry_date": {
          "type": "string",
          "format": "date",
          "description": "The warrant expiry date of the investor."
        },
        "warrant_certificate_number": {
          "type": "integer",
          "format": "int32",
          "description": "The certificate number of the investor."
        },
        "allocated_amount": {
          "type": "number",
          "format": "float",
          "description": "The allocation amount of the investor."
        },
        "allocation_unit": {
          "type": "string",
          "description": "The allocation unit of the investor.",
          "enum": [
            "securities",
            "amount"
          ],
          "default": "securities"
        },
        "investment_value": {
          "type": "DollarAmount",
          "description": "The investment value of the investor."
        },
        "notes": {
          "type": "string",
          "description": "The notes of the investor."
        }
      },
      "description": "Update deal investor"
    },
    "V1_Entities_InvestorOtpAccessLink": {
      "type": "object",
      "properties": {
        "access_link": {
          "type": "string",
          "description": "OTP access link for the investor."
        }
      },
      "description": "V1_Entities_InvestorOtpAccessLink model"
    },
    "V1_Entities_Deals_PriceDetails": {
      "type": "object",
      "properties": {
        "full_price": {
          "$ref": "#/definitions/V1_Entities_MoneyEntity",
          "description": "The full price of the incentive plan."
        },
        "final_price": {
          "$ref": "#/definitions/V1_Entities_MoneyEntity",
          "description": "The final price of the incentive plan."
        },
        "computed_investment_amount": {
          "type": "number",
          "format": "float",
          "description": "The computed valid investment amount based on a given investment amount."
        },
        "computed_number_of_securities": {
          "type": "integer",
          "format": "int32",
          "description": "The computed number of securities that can be purchased with a given investment amount."
        },
        "effective_tier": {
          "$ref": "#/definitions/V1_Entities_Deals_IncentivePlans_IncentiveTier",
          "description": "The effective tier of the incentive plan."
        },
        "incentive_plan": {
          "$ref": "#/definitions/V1_Entities_Deals_IncentivePlan",
          "description": "The incentive plan."
        }
      },
      "description": "V1_Entities_Deals_PriceDetails model"
    },
    "V1_Entities_MoneyEntity": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "float",
          "description": "The amount of money."
        },
        "amount_cents": {
          "type": "number",
          "format": "float",
          "description": "The amount of money in cents."
        },
        "formatted_amount": {
          "type": "string",
          "description": "A string representation of the amount"
        },
        "currency": {
          "type": "string",
          "description": "The currency of the money."
        }
      }
    },
    "V1_Entities_Deals_IncentivePlans_IncentiveTier": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The incentive tier id."
        },
        "status": {
          "type": "string",
          "description": "The incentive tier status."
        },
        "humanized_index": {
          "type": "integer",
          "format": "int32",
          "description": "The incentive tier humanized index."
        },
        "incentive_percentage": {
          "type": "number",
          "format": "float",
          "description": "The incentive tier percentage."
        },
        "end_at": {
          "type": "string",
          "format": "date-time",
          "description": "The incentive tier end date."
        },
        "start_at": {
          "type": "string",
          "format": "date-time",
          "description": "The incentive plan start date."
        },
        "funded_by": {
          "type": "string",
          "format": "date-time",
          "description": "The incentive tier funded by date, it is computed from the end at and plan funded by offset."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The creation time."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The last update time."
        }
      }
    },
    "V1_Entities_Deals_IncentivePlan": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The incentive plan id."
        },
        "humanized_index": {
          "type": "integer",
          "format": "int32",
          "description": "The humanized index of the incentive plan."
        },
        "deal_id": {
          "type": "integer",
          "format": "int32",
          "description": "The deal id."
        },
        "plan_type": {
          "type": "string",
          "enum": [
            "time"
          ],
          "description": "The incentive plan type."
        },
        "funded_by_offset": {
          "type": "integer",
          "format": "int32",
          "description": "The incentive plan funded by offset."
        },
        "active_at": {
          "type": "string",
          "format": "date-time",
          "description": "The incentive plan active date."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The creation time."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The last update time."
        },
        "tiers": {
          "$ref": "#/definitions/V1_Entities_Deals_IncentivePlans_IncentiveTier"
        }
      }
    },
    "postDealsIdInvestors": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "The investor email address."
        },
        "email_confirmation": {
          "type": "string",
          "description": "The investor confirmation email address."
        },
        "investor_profile_id": {
          "type": "integer",
          "format": "int32",
          "description": "The Investor Profile id."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "first_name": {
          "type": "string",
          "description": "The first name of the investor."
        },
        "last_name": {
          "type": "string",
          "description": "The last name of the investor."
        },
        "phone_number": {
          "type": "string",
          "description": "The phone number of the investor."
        },
        "message": {
          "type": "string",
          "description": "The reminder email text of the investor."
        },
        "warrant_expiry_date": {
          "type": "string",
          "format": "date",
          "description": "The warrant expiry date of the investor."
        },
        "warrant_certificate_number": {
          "type": "integer",
          "format": "int32",
          "description": "The certificate number of the investor."
        },
        "allocated_amount": {
          "type": "number",
          "format": "float",
          "description": "The allocation amount of the investor."
        },
        "investment_value": {
          "type": "DollarAmount",
          "description": "The investment value of the investor."
        },
        "allocation_unit": {
          "type": "string",
          "description": "The allocation unit of the investor.",
          "enum": [
            "securities",
            "amount"
          ],
          "default": "securities"
        },
        "state": {
          "type": "string",
          "description": "The initial state of the investor.",
          "enum": [
            "draft",
            "invited"
          ],
          "default": "invited"
        }
      },
      "required": [
        "email"
      ],
      "description": "Create deal investor"
    },
    "V1_Entities_Deals": {
      "type": "object",
      "properties": {
        "items": {
          "$ref": "#/definitions/V1_Entities_Deal"
        }
      },
      "description": "V1_Entities_Deals model"
    },
    "V1_Entities_Investor_SearchEntities": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Search entity ID."
        },
        "name": {
          "type": "string",
          "description": "The full name of the entity."
        },
        "type": {
          "type": "string",
          "enum": [
            "individual",
            "joint_holder"
          ],
          "description": "The type of the entity."
        },
        "type_num": {
          "type": "string",
          "description": "The position in the list when beneficial owner of trustees, if none it returns null."
        },
        "status": {
          "type": "string",
          "enum": [
            "pending",
            "document_upload_pending",
            "document_review_pending",
            "cleared",
            "flagged"
          ],
          "description": "Overall status of all entities."
        },
        "re_run_performed": {
          "type": "boolean",
          "description": "Whether or not the entity has been re-run."
        },
        "email_content": {
          "type": "string",
          "description": "The custom message for the entity"
        },
        "attachments": {
          "$ref": "#/definitions/V1_Entities_Attachment",
          "description": "An array of the attachments for the search entity."
        },
        "last_review_time": {
          "type": "string",
          "format": "date-time",
          "description": "The last time that the search entity was manually reviewed"
        },
        "required_fields": {
          "$ref": "#/definitions/V1_Entities_Investor_SearchEntities_RequiredFields",
          "description": "Object containing details about required fields that needs to be updated."
        }
      },
      "description": "V1_Entities_Investor_SearchEntities model"
    },
    "V1_Entities_Investor_SearchEntities_RequiredFields": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The quantity of fields that needs to be updated."
        },
        "name": {
          "type": "boolean",
          "description": "Whether or not the name needs to be updated."
        },
        "address": {
          "type": "boolean",
          "description": "Whether or not the address needs to be updated."
        },
        "date_of_birth": {
          "type": "boolean",
          "description": "Whether or not the date of birth needs to be updated."
        },
        "tin": {
          "type": "boolean",
          "description": "Whether or not the taxpayer identification number needs to be updated."
        },
        "enforcements": {
          "type": "boolean",
          "description": "Whether or not entity is flagged due to enforcements"
        }
      }
    },
    "V1_Entities_ExpressWireInstruction": {
      "type": "object",
      "properties": {
        "investor_id": {
          "type": "string",
          "description": "The id of the investor"
        },
        "bank_name": {
          "type": "string",
          "description": "Name of the bank for the payment"
        },
        "bank_address": {
          "type": "string",
          "description": "Address of the bank for the payment"
        },
        "beneficiary_address": {
          "type": "string",
          "description": "Address of the beneficiary for the payment"
        },
        "beneficiary_name": {
          "type": "string",
          "description": "Name of the beneficiary for the payment"
        },
        "account_number": {
          "type": "string",
          "description": "Account number for the payment"
        },
        "aba_routing": {
          "type": "string",
          "description": "Aba routing number for the payment"
        },
        "swift_code": {
          "type": "string",
          "description": "Swift code for the payment"
        }
      },
      "description": "V1_Entities_ExpressWireInstruction model"
    },
    "V1_Entities_ExpressWireInstructions": {
      "type": "object",
      "properties": {
        "items": {
          "$ref": "#/definitions/V1_Entities_ExpressWireInstruction"
        }
      },
      "description": "V1_Entities_ExpressWireInstructions model"
    },
    "V1_Entities_Deals_Investors_Payment_Ach_BankAccountSetupIntent": {
      "type": "object",
      "properties": {
        "clientSecret": {
          "type": "string",
          "description": "The client secret for the payment"
        },
        "name": {
          "type": "string",
          "description": "The name of the investor"
        }
      },
      "description": "V1_Entities_Deals_Investors_Payment_Ach_BankAccountSetupIntent model"
    },
    "V1_Entities_Deals_Investors_Payment_Acss_BankAccountSetupIntent": {
      "type": "object",
      "properties": {
        "clientSecret": {
          "type": "string",
          "description": "The client secret for the payment"
        },
        "name": {
          "type": "string",
          "description": "The name of the investor"
        },
        "email": {
          "type": "string",
          "description": "The email of the investor"
        }
      },
      "description": "V1_Entities_Deals_Investors_Payment_Acss_BankAccountSetupIntent model"
    },
    "V1_Entities_Payments_SelfServeOnboarding_QualificationQuestionnaire_Result": {
      "type": "object",
      "properties": {
        "onboardingStage": {
          "type": "string",
          "description": "Onboarding stage"
        },
        "payoutAccountCountry": {
          "type": "string",
          "description": "Payout account country"
        }
      },
      "description": "V1_Entities_Payments_SelfServeOnboarding_QualificationQuestionnaire_Result model"
    },
    "V1_Entities_Payments_SelfServeOnboarding_PayoutAccountDetails_Data": {
      "type": "object",
      "properties": {
        "country": {
          "type": "string",
          "description": "Payout account country"
        }
      },
      "description": "V1_Entities_Payments_SelfServeOnboarding_PayoutAccountDetails_Data model"
    },
    "V1_Entities_Payments_SelfServeOnboarding_PayoutAccountDetails_Result": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "Data after successful payout account updating"
        },
        "error": {
          "type": "object",
          "description": "Error after failed payout account updating"
        }
      },
      "description": "V1_Entities_Payments_SelfServeOnboarding_PayoutAccountDetails_Result model"
    },
    "V1_Entities_Payments_SelfServeOnboarding_DigitalPaymentsConnection_Data": {
      "type": "object",
      "properties": {
        "connectAccountLink": {
          "type": "string",
          "description": "A link to complete the setup for a Stripe connect account"
        }
      },
      "description": "V1_Entities_Payments_SelfServeOnboarding_DigitalPaymentsConnection_Data model"
    },
    "V1_Entities_Deals_Progress": {
      "type": "object",
      "properties": {
        "investorFunnel": {
          "$ref": "#/definitions/V1_Entities_Deals_ProgressKinds",
          "description": "The investor funnel."
        },
        "incomingPayments": {
          "$ref": "#/definitions/V1_Entities_Deals_ProgressKinds",
          "description": "The incoming payments."
        }
      },
      "description": "V1_Entities_Deals_Progress model"
    },
    "V1_Entities_Deals_ProgressKinds": {
      "type": "object",
      "properties": {
        "investmentAmount": {
          "$ref": "#/definitions/V1_Entities_Deals_ProgressColumn",
          "description": "Amount of investment."
        },
        "numberOfInvestments": {
          "$ref": "#/definitions/V1_Entities_Deals_ProgressColumn",
          "description": "Number of investments."
        },
        "numberOfSecurities": {
          "$ref": "#/definitions/V1_Entities_Deals_ProgressColumn",
          "description": "Number of securities."
        }
      }
    },
    "V1_Entities_Deals_ProgressColumn": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "The label of the column."
        },
        "value": {
          "type": "integer",
          "format": "int32",
          "description": "The value for the column."
        },
        "description": {
          "type": "integer",
          "format": "int32",
          "description": "The description of the column."
        }
      }
    },
    "V1_Entities_Deals_ProgressPage_Summary": {
      "type": "object",
      "properties": {
        "investment_proceeds": {
          "$ref": "#/definitions/V1_Entities_Deals_ProgressPage_SummaryItem"
        },
        "fees_and_adjustments": {
          "$ref": "#/definitions/V1_Entities_Deals_ProgressPage_SummaryItem"
        },
        "total_proceeds": {
          "$ref": "#/definitions/V1_Entities_Deals_ProgressPage_SummaryItem"
        },
        "processing_fees": {
          "$ref": "#/definitions/V1_Entities_Deals_ProgressPage_SummaryItem"
        },
        "invoice_deductions": {
          "$ref": "#/definitions/V1_Entities_Deals_ProgressPage_SummaryItem"
        },
        "accounts_receivable": {
          "$ref": "#/definitions/V1_Entities_Deals_ProgressPage_SummaryItem"
        },
        "upcoming_adspend": {
          "$ref": "#/definitions/V1_Entities_Deals_ProgressPage_SummaryItem"
        },
        "other_reserves": {
          "$ref": "#/definitions/V1_Entities_Deals_ProgressPage_SummaryItem"
        },
        "holdback": {
          "$ref": "#/definitions/V1_Entities_Deals_ProgressPage_SummaryItem"
        },
        "paid_out": {
          "$ref": "#/definitions/V1_Entities_Deals_ProgressPage_SummaryItem"
        },
        "available_for_payout": {
          "$ref": "#/definitions/V1_Entities_Deals_ProgressPage_SummaryItem"
        }
      },
      "description": "V1_Entities_Deals_ProgressPage_Summary model"
    },
    "V1_Entities_Deals_ProgressPage_SummaryItem": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "Label"
        },
        "highlighted": {
          "type": "boolean",
          "description": "Highlighted"
        },
        "negative": {
          "type": "boolean",
          "description": "Negative"
        },
        "value": {
          "type": "number",
          "format": "float",
          "description": "Value"
        },
        "link": {
          "type": "string",
          "description": "Link"
        },
        "description": {
          "type": "string",
          "description": "Description"
        },
        "link_label": {
          "type": "string",
          "description": "Link Label"
        }
      }
    },
    "V1_Entities_Deals_PlatformEmails_DomainSettings": {
      "type": "object",
      "properties": {
        "sender_name": {
          "type": "string",
          "description": "The name of the sender."
        },
        "sender_email": {
          "type": "string",
          "description": "The email address of the sender."
        },
        "authenticated_domains": {
          "type": "Array[String]",
          "description": "The authenticated domains."
        }
      },
      "description": "V1_Entities_Deals_PlatformEmails_DomainSettings model"
    },
    "V1_Entities_DealSetup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The deal setup id."
        },
        "deal_name": {
          "type": "string",
          "description": "The title/name of the deal."
        },
        "deal_type": {
          "type": "integer",
          "format": "int32",
          "description": "The type of the deal."
        },
        "invoice_contact": {
          "type": "string",
          "description": "The invoice email address."
        },
        "industry": {
          "type": "string",
          "description": "The industry."
        },
        "high_risk": {
          "type": "boolean",
          "description": "Determine if the deal is a high risk or not."
        },
        "company_id": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the company."
        },
        "link": {
          "type": "string",
          "description": "Link to the second page of the deal setup"
        },
        "representative": {
          "$ref": "#/definitions/V1_Entities_DealSetupUser",
          "description": "The user associated with this deal setup."
        }
      },
      "description": "V1_Entities_DealSetup model"
    },
    "V1_Entities_DealSetupUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Investor user id."
        },
        "email": {
          "type": "string",
          "description": "Investor user email address."
        }
      }
    },
    "V1_Entities_EmailTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The ID of the email template."
        },
        "name": {
          "type": "string",
          "description": "The name of the email template."
        },
        "jsonContent": {
          "type": "string",
          "description": "The json content of the email template."
        },
        "companyId": {
          "type": "integer",
          "format": "int32",
          "description": "The ID of the company."
        },
        "thumbnailImage": {
          "type": "string",
          "description": "The thumbnail image of the email template."
        }
      },
      "description": "V1_Entities_EmailTemplate model"
    },
    "V1_Entities_ShareholdersTags": {
      "type": "object",
      "properties": {
        "tagName": {
          "type": "string"
        },
        "shareholders": {
          "type": "string"
        }
      },
      "description": "V1_Entities_ShareholdersTags model"
    },
    "V1_Entities_Shareholders": {
      "type": "object",
      "properties": {
        "items": {
          "$ref": "#/definitions/V1_Entities_Shareholder"
        }
      },
      "description": "V1_Entities_Shareholders model"
    },
    "V1_Entities_Shareholder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Shareholder id."
        },
        "email": {
          "type": "string",
          "description": "Shareholder email address."
        },
        "fullName": {
          "type": "string",
          "description": "Shareholder first name."
        },
        "tags": {
          "type": "Array[String]",
          "description": "Shareholder tags."
        }
      }
    },
    "V1_Entities_EmailEvents": {
      "type": "object",
      "properties": {
        "rows": {
          "$ref": "#/definitions/V1_Entities_EmailEvent"
        },
        "rowsCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of email events."
        }
      },
      "description": "V1_Entities_EmailEvents model"
    },
    "V1_Entities_EmailEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the email event."
        },
        "name": {
          "type": "string",
          "description": "The name of the shareholder."
        },
        "email": {
          "type": "string",
          "description": "The email of the shareholder."
        },
        "delivered": {
          "type": "integer",
          "format": "int32",
          "description": "The number of email delivered."
        },
        "opened": {
          "type": "integer",
          "format": "int32",
          "description": "The number of email opened."
        },
        "clicked": {
          "type": "integer",
          "format": "int32",
          "description": "The number of email clicked."
        },
        "bounced": {
          "type": "integer",
          "format": "int32",
          "description": "The number of email bounced."
        }
      }
    },
    "V1_Entities_ShareholderLedger": {
      "type": "object",
      "properties": {
        "shareholder_ledger_url": {
          "type": "string",
          "description": "The URL of the shareholder ledger."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the shareholder ledger was created."
        }
      },
      "description": "V1_Entities_ShareholderLedger model"
    },
    "V1_Entities_Dividends": {
      "type": "object",
      "properties": {
        "items": {
          "$ref": "#/definitions/V1_Entities_Dividend"
        }
      },
      "description": "V1_Entities_Dividends model"
    },
    "V1_Entities_Dividend": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The dividend ID."
        },
        "filename": {
          "type": "string",
          "description": "The dividend filename."
        },
        "created_at": {
          "type": "string",
          "description": "The created at timestamp"
        },
        "statement_link": {
          "type": "string",
          "description": "The dividend statement link."
        }
      }
    },
    "V1_Entities_BulkUploads": {
      "type": "object",
      "properties": {
        "items": {
          "$ref": "#/definitions/V1_Entities_BulkUpload"
        }
      },
      "description": "V1_Entities_BulkUploads model"
    },
    "V1_Entities_BulkUpload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The bulk upload ID"
        },
        "company_id": {
          "type": "integer",
          "format": "int32",
          "description": "The company ID"
        },
        "file_identifier": {
          "type": "string",
          "description": "The file identifier [shareholder, investor]"
        },
        "document_type": {
          "type": "string",
          "enum": [
            "drs_statement",
            "shareholder_statement",
            "book_entry_statement",
            "dividend_statement"
          ],
          "description": "The document type "
        },
        "upload_name": {
          "type": "string",
          "description": "The bulk upload name"
        },
        "files_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of files in the bulk upload"
        },
        "errors_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of errors in the bulk upload"
        },
        "success_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of succeeded files in the bulk upload"
        },
        "status": {
          "type": "string",
          "description": "The status [pending, processing, completed, failed]"
        },
        "created_at": {
          "type": "string",
          "description": "The created at timestamp"
        },
        "updated_at": {
          "type": "string",
          "description": "The updated at timestamp"
        }
      },
      "description": "V1_Entities_BulkUpload model"
    },
    "V1_Entities_BulkUploadDetails": {
      "type": "object",
      "properties": {
        "items": {
          "$ref": "#/definitions/V1_Entities_BulkUploadDetail"
        }
      },
      "description": "V1_Entities_BulkUploadDetails model"
    },
    "V1_Entities_BulkUploadDetail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The ID for the bulk upload detail"
        },
        "bulk_upload_id": {
          "type": "integer",
          "format": "int32",
          "description": "The bulk upload ID"
        },
        "file_key": {
          "type": "string",
          "description": "The generated identifier for the file"
        },
        "file_name": {
          "type": "string",
          "description": "The name of the file"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "The status of the bulk upload detail"
        },
        "readable_status": {
          "type": "string",
          "description": "The readable status of the bulk upload detail"
        },
        "created_at": {
          "type": "string",
          "description": "The created at date"
        },
        "updated_at": {
          "type": "string",
          "description": "The updated at date"
        }
      },
      "description": "V1_Entities_BulkUploadDetail model"
    },
    "V1_Entities_GenericResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "The status of the creation response"
        },
        "message": {
          "type": "string",
          "description": "The message of the creation response"
        }
      },
      "description": "V1_Entities_GenericResponse model"
    },
    "V1_Entities_MembersBulkUploads": {
      "type": "object",
      "properties": {
        "items": {
          "$ref": "#/definitions/V1_Entities_MembersBulkUpload"
        }
      },
      "description": "V1_Entities_MembersBulkUploads model"
    },
    "V1_Entities_MembersBulkUpload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The bulk upload ID"
        },
        "companyId": {
          "type": "integer",
          "format": "int32",
          "description": "The company ID"
        },
        "status": {
          "type": "string",
          "description": "The status [pending, processing, completed, failed]"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of members in the bulk upload"
        },
        "processedCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of processed members in the bulk upload"
        },
        "errorCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of failed members in the bulk upload"
        },
        "sendNotification": {
          "type": "string",
          "description": "Send notification to the user"
        },
        "offsiteShareholder": {
          "type": "string",
          "description": "Offside shareholder"
        },
        "emailSubject": {
          "type": "string",
          "description": "Email subject"
        },
        "emailContent": {
          "type": "string",
          "description": "Email content"
        },
        "errorDetails": {
          "type": "string",
          "description": "The error details"
        },
        "createdAt": {
          "type": "string",
          "description": "The created at timestamp"
        },
        "updatedAt": {
          "type": "string",
          "description": "The updated at timestamp"
        }
      },
      "description": "V1_Entities_MembersBulkUpload model"
    },
    "V1_Entities_BeefreeAccessToken": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "description": "The access token for initializing beefree builders intances."
        },
        "expires_in": {
          "type": "integer",
          "format": "int32",
          "description": "The expires in field."
        }
      },
      "description": "V1_Entities_BeefreeAccessToken model"
    },
    "V1_Entities_Webhooks_SecurityToken": {
      "type": "object",
      "properties": {
        "security_token": {
          "type": "string",
          "description": "The generated security token."
        }
      },
      "description": "V1_Entities_Webhooks_SecurityToken model"
    },
    "V1_Entities_Webhooks_Deal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Deal id."
        },
        "name": {
          "type": "string",
          "description": "Deal name."
        },
        "company_name": {
          "type": "string",
          "description": "Name of the company that owns the deal."
        }
      },
      "description": "V1_Entities_Webhooks_Deal model"
    },
    "V1_Entities_Webhooks_Subscription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Webhook subscription id."
        },
        "name": {
          "type": "string",
          "description": "Webhook subscription name."
        },
        "url": {
          "type": "string",
          "description": "Webhook subscription payload URL."
        },
        "enabled": {
          "type": "boolean",
          "description": "Webhook subscription status."
        },
        "security_token": {
          "type": "string",
          "description": "Webhook subscription secrete key."
        },
        "deals": {
          "$ref": "#/definitions/V1_Entities_Webhooks_SubscriptionDeals"
        }
      },
      "description": "V1_Entities_Webhooks_Subscription model"
    },
    "V1_Entities_Webhooks_SubscriptionDeals": {
      "type": "object",
      "properties": {
        "items": {
          "$ref": "#/definitions/V1_Entities_Webhooks_SubscriptionDeal"
        }
      }
    },
    "V1_Entities_Webhooks_SubscriptionDeal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the webhook subscription deal."
        },
        "deal_id": {
          "type": "string",
          "description": "Linked deal id."
        },
        "name": {
          "type": "string",
          "description": "Linked deal name."
        },
        "company_name": {
          "type": "string",
          "description": "Name of the company that owns the linked deal."
        }
      }
    },
    "V1_Entities_Ttw_Reservation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The ID of the reservation."
        }
      },
      "description": "V1_Entities_Ttw_Reservation model"
    },
    "V1_Entities_Ttw_Campaign_Response": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The campaign ID"
        },
        "name": {
          "type": "string",
          "description": "Campaign name"
        },
        "tags": {
          "type": "json",
          "description": "Campaign tags"
        },
        "redirect_link": {
          "type": "string",
          "description": "Redirect link for the campaign"
        },
        "introduction_email": {
          "type": "boolean",
          "description": "State of the introduction email"
        },
        "one_day_reminder_email": {
          "type": "boolean",
          "description": "State of the 1 day reminder email"
        },
        "two_day_reminder_email": {
          "type": "boolean",
          "description": "State of the 2 day reminder email"
        },
        "seven_day_reminder_email": {
          "type": "boolean",
          "description": "State of the 7 day reminder email"
        },
        "confirmation_email": {
          "type": "boolean",
          "description": "State of the confirmation email"
        }
      },
      "description": "V1_Entities_Ttw_Campaign_Response model"
    }
  }
}
